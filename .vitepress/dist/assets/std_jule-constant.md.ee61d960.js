import{_ as e,o as t,c as s,Q as o}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"std::jule::constant","description":"","frontmatter":{},"headers":[],"relativePath":"std/jule-constant.md","filePath":"std/jule-constant.md"}'),n={name:"std/jule-constant.md"},r=o('<h1 id="std-jule-constant" tabindex="-1">std::jule::constant <a class="header-anchor" href="#std-jule-constant" aria-label="Permalink to &quot;std::jule::constant&quot;">​</a></h1><h2 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Const</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Constant data.<br> Use <code>Const.new_nil</code> function istead of <code>Const{}</code> for nil literal.</p><p><strong>Methods:</strong></p><p><code>static fn new_i64(x: i64): &amp;Const</code><br> Returns new constant value instance from 64-bit signed integer.</p><p><code>static fn new_u64(x: u64): &amp;Const</code><br> Returns new constant value instance from 64-bit unsigned integer.</p><p><code>static fn new_bool(x: bool): &amp;Const</code><br> Returns new constant value instance from boolean.</p><p><code>static fn new_str(x: str): &amp;Const</code><br> Returns new constant value instance from string.</p><p><code>static fn new_f64(x: f64): &amp;Const</code><br> Returns new constant value instance from 64-bit floating-point.</p><p><code>static fn new_nil(): &amp;Const</code><br> Returns new constant value instance with nil.</p><p><code>fn read_i64(self): i64</code><br> Reads 64-bit signed integer data.<br> Returns 0 if data is not 64-bit signed integer.</p><p><code>fn read_u64(self): u64</code><br> Reads 64-bit unsigned integer data.<br> Returns 0 if data is not 64-bit unsigned integer.</p><p><code>fn read_bool(self): bool</code><br> Reads boolean data.<br> Returns false if data is not boolean.</p><p><code>fn read_str(self): str</code><br><code>Reads string data.</code><br> Returns empty string if data is not string.</p><p><code>fn read_f64(self): f64</code><br> Reads 64-bit floating-point data.<br> Returns 0 if data is not 64-bit floating-point.</p><p><code>fn as_i64(self): i64</code><br> Reads data as 64-bit signed integer.<br> Returns 0 if data is string, bool or which is not numeric.</p><p><code>fn as_u64(self): u64</code><br> Reads data as 64-bit unsigned integer.<br> Returns 0 if data is string, bool or which is not numeric.</p><p><code>fn as_f64(self): f64</code><br> Reads data as 64-bit floating-point.<br> Returns 0 if data is string, bool or which is not numeric.</p><p><code>fn set_i64(mut self, x: i64)</code><br> Sets constant value from 64-bit signed integer.</p><p><code>fn set_u64(mut self, x: u64)</code><br> Sets constant value from 64-bit unsigned integer.</p><p><code>fn set_bool(mut self, x: bool)</code><br> Sets constant value from boolean.</p><p><code>fn set_str(mut self, x: str)</code><br> Sets constant value from string.</p><p><code>fn set_f64(mut self, x: f64)</code><br> Sets constant value from 64-bit floating-point.</p><p><code>fn set_nil(mut self)</code><br> Sets constant value to nil.</p><p><code>fn is_i64(self): bool</code><br> Reports whether data is 64-bit signed integer.</p><p><code>fn is_u64(self): bool</code><br> Reports whether data is 64-bit unsigned integer.</p><p><code>fn is_bool(self): bool</code><br> Reports whether data is boolean.</p><p><code>fn is_str(self): bool</code><br> Reports whether data is string.</p><p><code>fn is_f64(self): bool</code><br> Reports whether data is 64-bit floating-point.</p><p><code>fn is_nil(self): bool</code><br> Reports whether data is nil.</p><p><code>fn are_same_types(self, x: Const): bool</code><br> Reports whether self and x has same type.</p><p><code>fn and(self, x: Const): bool</code><br> Reports whether self and x are true.<br> Returns false if type is not supported.</p><p><code>fn or(self, x: Const): bool</code><br> Reports whether self or x is true.<br> Returns false if type is not supported.</p><p><code>fn eqs(self, x: Const): bool</code><br> Reports whether self and x are equals.<br> Returns false if type is not supported.</p><p><code>fn lt(self, x: Const): bool</code><br> Reports whether self less than x.<br> Returns false if type is unsupported by operation.</p><p>Supported types are:</p><ul><li>64-bit signed integer</li><li>64-bit unsigned integer</li><li>64-bit floating-point</li></ul><p><code>fn gt(self, x: Const): bool</code><br> Reports whether self greater than x.<br> Returns false if type is unsupported by operation.</p><p>Supported types are:</p><ul><li>64-bit signed integer</li><li>64-bit unsigned integer</li><li>64-bit floating-point</li></ul><p><code>fn add(mut self, x: Const): bool</code><br> Adds x&#39;s value to itself value.<br> Reports whether operation is success.</p><p><code>fn sub(mut self, x: Const): bool</code><br> Subs x&#39;s value from itself value.<br> Reports whether operation is success.</p><p><code>fn mul(mut self, x: Const): bool</code><br> Multiplies x&#39;s value to c&#39;s value.<br> Reports whether operation is success.</p><p><code>fn div(mut self, x: Const): bool</code><br> Divides itself value to x&#39;s value.<br> Reports whether operation is success.<br> Reports false if divided-by-zero.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This operation makes constant value is floating-point.</p></div><p><code>fn mod(mut self, x: Const): bool</code><br> Mods itself value to x&#39;s value.<br> Reports whether operation is success.<br> Reports false if divided-by-zero.</p><p><code>fn bitwise_and(mut self, x: Const): bool</code><br> Bitwise and itself value to x&#39;s value.<br> Reports whether operation is success.</p><p><code>fn bitwise_or(mut self, x: Const): bool</code><br> Bitwise or itself value to x&#39;s value.<br> Reports whether operation is success.</p><p><code>fn xor(mut self, x: Const): bool</code><br> Bitwise xor itself value to x&#39;s value.<br> Reports whether operation is success.</p><p><code>fn lshift(mut self, x: Const): bool</code><br> Left shifts itself value to x&#39;s value.<br> Reports whether operation is success.\\</p><p><code>fn rshift(mut self, x: Const): bool</code><br> Right shifts itself value to x&#39;s value.<br> Reports whether operation is success.</p>',52),i=[r];function a(l,d,p,c,f,u){return t(),s("div",null,i)}const g=e(n,[["render",a]]);export{h as __pageData,g as default};
