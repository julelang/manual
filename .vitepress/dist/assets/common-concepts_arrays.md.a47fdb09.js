import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Arrays","description":"","frontmatter":{},"headers":[],"relativePath":"common-concepts/arrays.md","filePath":"common-concepts/arrays.md"}'),l={name:"common-concepts/arrays.md"},o=e(`<h1 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">​</a></h1><p>The array for storing a fixed size sequence of elements.</p><h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">[CONST_SIZE_EXPRESSION]DATA_TYPE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="auto-sized-arrays" tabindex="-1">Auto-Sized Arrays <a class="header-anchor" href="#auto-sized-arrays" aria-label="Permalink to &quot;Auto-Sized Arrays&quot;">​</a></h2><p>You can use <code>...</code> for auto computing size of array literal at compile time.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x: [...]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// [5]int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Only works as expected with variables. Other declarations supports this syntax, but always uses zero length arrays, not auto-sized arrays.</p></div><h2 id="filling-arrays" tabindex="-1">Filling Arrays <a class="header-anchor" href="#filling-arrays" aria-label="Permalink to &quot;Filling Arrays&quot;">​</a></h2><p>You can use <code>...</code> for filling arrays with special expression.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x: [</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, ...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The array in the example above holds <code>1000</code> integers and each integer is setted to <code>100</code>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This method cannot be used for auto-sized arrays.</p></div><h2 id="access-to-elements-and-indexing" tabindex="-1">Access to Elements and Indexing <a class="header-anchor" href="#access-to-elements-and-indexing" aria-label="Permalink to &quot;Access to Elements and Indexing&quot;">​</a></h2><p>Index system is simple. Starts at <code>0</code> and continue step by step. Negative and floating-point indexes are considered invalid / not allowed for indexing.</p><p>Arrays use indexes to access elements and assignment.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> my_array: [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;arrays&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;indexes&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(my_array[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    my_array[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(my_array)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>For element access, index is written between brackets (<code>[]</code>). First statement declares our array. Second statement prints first element of our array. Next statement sets first element of our array as <code>&quot;Hi&quot;</code>. The last statement prints our array to console.</p><p>Output of program:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">Hello</span></span>
<span class="line"><span style="color:#e1e4e8;">[Hi arrays indexes]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="multidimensional-arrays" tabindex="-1">Multidimensional Arrays <a class="header-anchor" href="#multidimensional-arrays" aria-label="Permalink to &quot;Multidimensional Arrays&quot;">​</a></h2><p>A multidimensional array is an array storing arrays.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> my_array: [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;Apple&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Banana&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;Bred&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Cheese&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(my_array)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Output of program:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">[[Apple Banana] [Bred Cheese]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,31),p=[o];function r(t,c,i,d,y,E){return a(),n("div",null,p)}const b=s(l,[["render",r]]);export{m as __pageData,b as default};
