import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7cd3ab18.js";const y=JSON.parse('{"title":"std::jule::sema","description":"","frontmatter":{},"headers":[],"relativePath":"std/jule-sema.md","filePath":"std/jule-sema.md"}'),e={name:"std/jule-sema.md"},p=l(`<h1 id="std-jule-sema" tabindex="-1">std::jule::sema <a class="header-anchor" href="#std-jule-sema" aria-label="Permalink to &quot;std::jule::sema&quot;">​</a></h1><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><h3 id="type-exprmodel-any" tabindex="-1"><code>type ExprModel: any</code> <a class="header-anchor" href="#type-exprmodel-any" aria-label="Permalink to &quot;\`type ExprModel: any\`&quot;">​</a></h3><p>Expression model.</p><h3 id="type-st-any" tabindex="-1"><code>type St: any</code> <a class="header-anchor" href="#type-st-any" aria-label="Permalink to &quot;\`type St: any\`&quot;">​</a></h3><p>Statement type.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">analyze_package</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> files: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Ast, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> importer: Importer, flags: SemaFlag): (</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Package, []Log)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Builds symbol table of package&#39;s ASTs.<br> Returns nil if files is nil.<br> Returns nil if pwd is empty.<br> Returns nil if pstd is empty.<br> Accepts current working directory is pwd.</p><p>Parameters:</p><ul><li>files: abstract syntax trees of files</li><li>importer: importer that used for use declarations</li></ul><p>Dependent Parameters:</p><ul><li>working-directory: uses working directory path provided by build</li><li>std-path: uses standard library path provided by build</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You can pass nil to importer, but panics if importer is nil and semantic analyzer used nil importer.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">analyze_file</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> f: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Ast, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> importer: Importer, flags: SemaFlag): (</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">SymbolTable, []Log)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Builds symbol table of package&#39;s ASTs.<br> Returns nil if files is nil.<br> Returns nil if pwd is empty.<br> Returns nil if pstd is empty.<br> Accepts current working directory is pwd.</p><p>Parameters:</p><ul><li>files: abstract syntax trees of files</li><li>importer: importer that used for use declarations</li></ul><p>Dependent Parameters:</p><ul><li>working-directory: uses working directory path provided by build</li><li>std-path: uses standard library path provided by build</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You can pass nil to importer, but panics if importer is nil and semantic analyzer used nil importer.</p></div><h2 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> EnumItem {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Value</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Enum item.</p><p><strong>Methods:</strong></p><p><code>fn auto_expr(self): bool</code><br> Reports whether item has auto expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Enum {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:  Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    public: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:  </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeSymbol</span></span>
<span class="line"><span style="color:#E1E4E8;">    items:  []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">EnumItem</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc:    </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Enum.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong>\\</p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn find_item(mut self, ident: str): &amp;EnumItem</code><br> Returns item by identifier.<br> Returns nil reference if not exist any item in this identifier.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Data {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    cast_kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind </span><span style="color:#6A737D;">// This expression should be cast to this kind.</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    reference: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    lvalue:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    is_rune:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    model:     ExprModel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// True if kind is declaration such as:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  - &amp;Enum</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  - &amp;Struct</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  - int type</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  - bool type</span></span>
<span class="line"><span style="color:#E1E4E8;">    decl: </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Constant expression data.</span></span>
<span class="line"><span style="color:#E1E4E8;">    constant: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Const</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Value data.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong>\\</p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn is_nil(self): bool</code><br> Reports whether Data is nil literal.</p><p><code>fn is_void(self): bool</code><br> Reports whether Data is void.</p><p><code>fn is_const(self): bool</code><br> Reports whether Data is constant expression.</p><p><code>fn good_operand(self, mut &amp;other: &amp;Data): bool</code><br> Reports left and right operand is good order. If reports false, left and right operand should be swapped. Accepts itself as left operand.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Value {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Value.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BinopExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    left:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    right: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    op:    </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Binary operation expression model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> UnaryExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    op:    </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Unary operation expression model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> StructArgExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    field: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FieldIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Structure field argument expression model for constructors.<br> For example: <code>&amp;MyStruct{10, false, &quot;-&quot;}</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> StructLitExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    strct: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">StructIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    args:  []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">StructArgExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Structure literal.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> AllocStructLitExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    lit: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">StructLitExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Heap allocated structure litral expression.<br> For example: <code>&amp;MyStruct{}</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> CastingExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:      ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr_kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Casting expression model. For example: <code>(int)(my_float)</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FnCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:    Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    func:     </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    is_co:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:     ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    args:     []ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    except:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">    assigned: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Function call expression model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinErrorCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    func: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    err:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Expression model for built-in error function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SliceExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem_kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    elems:     []ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Slice expression model.<br> For example: <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> IndexingExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">    index: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Indexing expression model.<br> For example: <code>my_slice[my_index]</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> AnonFnExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    func:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    global: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Anonymous function expression model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> KeyValPairExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    val: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Key-value expression pair model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> MapExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key_kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    val_kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    entries:  []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">KeyValPairExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Map expression model. For example: <code>{0: false, 1: true}</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SlicingExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    left:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    right: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Slicing expression model. For example: <code>my_slice[2:my_slice.len-5]</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TraitSubIdentExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Trait sub-ident expression model. For example: <code>my_trait.my_sub_ident</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> StructSubIdentExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:      ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr_kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    method:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    field:     </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FieldIns</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Structure sub-ident expression model. For example: <code>my_struct.my_sub_ident</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ArrayExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Arr</span></span>
<span class="line"><span style="color:#E1E4E8;">    elems: []ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Array expression model. If array filled, elems field holds 2 data. First data is expression, second is nil, kind of mark to that array filled.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> CommonIdentExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Common ident expression model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> CommonSubIdentExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Common sub-ident expression model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TupleExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    datas: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Tuple expression model.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinOutCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Expression model for built-in out function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinOutlnCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Expression model for built-in outln function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinCloneCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Expression model for built-in clone function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinCloneNewExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    init: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Expression model for built-in new function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinPanicCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Expression model for built-in panic function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinAssertCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Expression model for built-in assert function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinMakeCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    size: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Expression model for built-in make function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BuiltinAppendCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dest:     ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    elements: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Expression model for built-in append function calls.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SizeofExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Expression model for sizeof expressions.<br> For exmaple, in C++: <code>sizeof(int)</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> AlignofExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Expression model for alignof expressions.<br> For exmaple, in C++: <code>alignof(int)</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> StrConstructorCallExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Expression model for constructor call of str type.<br> For exmaple: <code>str(my_expr)</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> RuneExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    code: </span><span style="color:#F97583;">rune</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Rune literal expression model. For exmaple: <code>&#39;a&#39;</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> IntegratedToStrExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    pexpr: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Expression model for to_str function of std::jule::integrated library.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TernaryExprModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    condition:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    true_expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    false_expr: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Expression model for ternary operator.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> RetType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeSymbol</span></span>
<span class="line"><span style="color:#E1E4E8;">    idents: []Token</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Return type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Param {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:     Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    variadic:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    reference: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeSymbol</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:     </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Parameter.</p><p><strong>Methods:</strong></p><p><code>fn is_self(self): bool</code><br> Reports whether parameter is self (receiver) parameter.</p><p><code>fn is_ref(self): bool</code><br> Reports whether self (receiver) parameter is reference.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Fn {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:       Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    global:      </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    unsafety:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:      </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    statically:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    exceptional: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:       </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    directives:  []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Directive</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc:         </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:    []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">GenericDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    result:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RetType</span></span>
<span class="line"><span style="color:#E1E4E8;">    params:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Param</span></span>
<span class="line"><span style="color:#E1E4E8;">    owner:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Function instances for each unique type combination of function call.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Nil if function is never used.</span></span>
<span class="line"><span style="color:#E1E4E8;">    instances: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Function.</p><p><strong>Methods:</strong></p><p><code>fn is_void(self): bool</code><br> Reports whether return type is void.</p><p><code>fn is_method(self): bool</code><br> Reports whether function is method.</p><p><code>fn is_entry_point(self): bool</code><br> Reports whether function is entry point.</p><p><code>fn is_anon(self): bool</code><br> Reports whether function is anonymous funuction.</p><p><code>fn any_var(self): bool</code><br> Reports whether function has return variable(s).</p><p><code>fn parameters_uses_generics(self): bool</code><br> Reports whether any parameter uses generic types.</p><p><code>fn result_uses_generics(self): bool</code><br> Reports whether result type uses generic types.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ParamIns {</span></span>
<span class="line"><span style="color:#E1E4E8;">    decl: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Param</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Parameter instance.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FnIns {</span></span>
<span class="line"><span style="color:#E1E4E8;">    owner:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">StructIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    decl:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Fn</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:   []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    params:     []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ParamIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    result:     </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">    references: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ReferenceStack</span></span>
<span class="line"><span style="color:#E1E4E8;">    anon:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Stores all referenced definitions.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Only stores for initializer functions.</span></span>
<span class="line"><span style="color:#E1E4E8;">    refers: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ReferenceStack</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Function instance.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn is_builtin(self): bool</code><br> Reports whether instance is built-in.</p><p><code>fn is_anon(self): bool</code><br> Reports whether instance is anonymous function.</p><p><code>fn get_kind_str(self, ident: bool): str</code> <br> Returns kind string of function instance. Appends identifier to kind of this instance. Does not appends identifier of this instance to kind if self.decl is nil reference.</p><p><code>fn same(self, f: &amp;FnIns): bool</code><br> Reports whether instances are same. Returns true if declarations and generics are same.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Impl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    base:    Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    dest:    Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Fn</span></span>
<span class="line"><span style="color:#E1E4E8;">    statics: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Implementation.</p><p><strong>Methods:</strong></p><p><code>fn is_trait_impl(self): bool</code><br> Reports whether implementation type is trait to structure.</p><p><code>fn is_struct_impl(self): bool</code><br> Reports whether implementation type is append to destination structure.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ImportInfo {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Use declaration token.</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Absolute path.</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: </span><span style="color:#F97583;">str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Use declaration path string.</span></span>
<span class="line"><span style="color:#E1E4E8;">    link_path: </span><span style="color:#F97583;">str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Package identifier (aka package name).</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Empty if package is cpp header.</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Package alias identifier.</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias: </span><span style="color:#F97583;">str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// True if imported with Importer.Get_import function.</span></span>
<span class="line"><span style="color:#E1E4E8;">    duplicate: </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Is cpp use declaration.</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked: </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Is standard library package.</span></span>
<span class="line"><span style="color:#E1E4E8;">    std: </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Is imported all defines implicitly.</span></span>
<span class="line"><span style="color:#E1E4E8;">    import_all: </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Identifiers of selected definition.</span></span>
<span class="line"><span style="color:#E1E4E8;">    selected: []Token</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Nil if package is cpp header.</span></span>
<span class="line"><span style="color:#E1E4E8;">    package: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Package</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>Import information.<br> Represents imported package by use declaration.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Lookup</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Package {</span></span>
<span class="line"><span style="color:#E1E4E8;">    files: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">SymbolTable</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Package.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Lookup</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Scope {</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">    unsafety: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    deferred: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    stmts:    []St</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Scope.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> If {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Cain conditional node.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Else {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Default scope of conditional chain.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Conditional {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elifs:  []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">If</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Else</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Conditional chain.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> InfIter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Infinity iteration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> WhileIter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    next:  St</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>While iteration.</p><p><strong>Methods:</strong></p><p><code>fn is_while_next(self): bool</code><br> Reports whether iteration is while-next.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> RangeIter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">    key_a: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var</span></span>
<span class="line"><span style="color:#E1E4E8;">    key_b: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Range iteration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Contst {</span></span>
<span class="line"><span style="color:#E1E4E8;">    it: </span><span style="color:#F97583;">uintptr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Continue statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Breakst {</span></span>
<span class="line"><span style="color:#E1E4E8;">    it:   </span><span style="color:#F97583;">uintptr</span></span>
<span class="line"><span style="color:#E1E4E8;">    mtch: </span><span style="color:#F97583;">uintptr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Break statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Label {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> GotoSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Postfix {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    op:   </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Postfix assignment.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Assign {</span></span>
<span class="line"><span style="color:#E1E4E8;">    l:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    r:  ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    op: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Assignment.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> MultiAssign {</span></span>
<span class="line"><span style="color:#E1E4E8;">    l: []ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    r: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Multi-declarative assignment.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Match {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">    type_match: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    cases:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Case</span></span>
<span class="line"><span style="color:#E1E4E8;">    default:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Case</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Match-Case.</p><p><strong>Methods:</strong></p><p><code>fn is_generic_type_match(self): bool</code><br> Reports whether match is type-match for generic type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Case {</span></span>
<span class="line"><span style="color:#E1E4E8;">    owner: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Match</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">    exprs: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">    next:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Case</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>Methods:</strong></p><p><code>fn is_default(self): bool</code><br> Reports whether case is default.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FallSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dest_case: </span><span style="color:#F97583;">uintptr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> RetSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    func: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    vars: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Return statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Recover {</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler_expr: ExprModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Scope</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope_owner:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnIns</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Built-in recover function call statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ReferenceStack {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Stack for symbol references.</p><p><strong>Methods:</strong></p><p><code>fn len(self): int</code><br> Returns count of references.</p><p><code>fn at(mut self, i: int): any</code><br> Returns reference by index.</p><p><code>fn push(mut self, mut ref: any)</code><br> Push new reference to stack.</p><p><code>fn remove(mut self, i: int)</code><br> Removes reference by index.</p><p><code>fn exist[T](self, t: &amp;T): bool</code><br> Reports whether reference is exist.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Field {</span></span>
<span class="line"><span style="color:#E1E4E8;">    owner:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:   Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:   </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeSymbol</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    depends:    []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct</span></span>
<span class="line"><span style="color:#E1E4E8;">    uses:       []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:      Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:      </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    fields:     []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Field</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods:    []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Fn</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    directives: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Directive</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:   []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">GenericDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    implements: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Trait</span></span>
<span class="line"><span style="color:#E1E4E8;">    instances:  []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">StructIns</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Structure.</p><p><strong>Methods:</strong></p><p><code>fn find_method(mut self, ident: str): &amp;Fn</code><br> Returns method by identifier.<br> Returns nil reference if not exist any method in this identifier.</p><p><code>fn find_static(mut self, ident: str): &amp;Var</code><br> Returns static field by identifier. Returns nil reference if not exist any static field in this identifier.</p><p><code>fn find_field(mut self, ident: str): &amp;Field</code><br> Returns field by identifier.<br> Returns nil reference if not exist any field in this identifier.</p><p><code>fn is_implements(self, t: &amp;Trait): bool</code><br> Reports whether structure implements given trait.</p><p><code>fn is_derives(self, ident: str): bool</code><br> Reports whether structure is derives given derive.</p><p><code>fn is_uses(self, s: &amp;Struct): bool</code><br> Reports whether structure is uses given structure.</p><p><code>fn has_ref_accessible(self): bool</code><br> Reports whether structure has only reference-type-accessible defines.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FieldIns {</span></span>
<span class="line"><span style="color:#E1E4E8;">    decl: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Field</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Field instance.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> StructIns {</span></span>
<span class="line"><span style="color:#E1E4E8;">    checked:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    decl:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:   []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    fields:     []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FieldIns</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods:    []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Fn</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    references: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ReferenceStack</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Structure instance.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn find_method(mut self, ident: str): &amp;Fn</code><br> Returns method by identifier.<br> Returns nil reference if not exist any method in this identifier.</p><p><code>fn find_field(mut self, ident: str): &amp;FieldIns</code><br> Returns field by identifier.<br> Returns nil reference if not exist any field in this identifier.</p><p><code>fn same(self, s: &amp;StructIns): bool</code><br> Reports whether instances are same.<br> Returns true if declarations and generics are same.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Pass {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    text:  </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Directive pass.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SymbolTable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file:         </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File         </span><span style="color:#6A737D;">// Owner fileset of this symbol table.</span></span>
<span class="line"><span style="color:#E1E4E8;">    passes:       []Pass        </span><span style="color:#6A737D;">// All passed flags with jule:pass directive.</span></span>
<span class="line"><span style="color:#E1E4E8;">    imports:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ImportInfo </span><span style="color:#6A737D;">// Imported packages.</span></span>
<span class="line"><span style="color:#E1E4E8;">    vars:         []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var        </span><span style="color:#6A737D;">// Variables.</span></span>
<span class="line"><span style="color:#E1E4E8;">    type_aliases: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeAlias  </span><span style="color:#6A737D;">// Type aliases.</span></span>
<span class="line"><span style="color:#E1E4E8;">    structs:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct     </span><span style="color:#6A737D;">// Structures.</span></span>
<span class="line"><span style="color:#E1E4E8;">    funcs:        []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Fn         </span><span style="color:#6A737D;">// Functions.</span></span>
<span class="line"><span style="color:#E1E4E8;">    traits:       []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Trait      </span><span style="color:#6A737D;">// Traits.</span></span>
<span class="line"><span style="color:#E1E4E8;">    enums:        []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Enum       </span><span style="color:#6A737D;">// Enums.</span></span>
<span class="line"><span style="color:#E1E4E8;">    impls:        []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Impl       </span><span style="color:#6A737D;">// Implementations.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Structure instance.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Lookup</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Trait {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:       Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:       </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:      </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:     </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc:         </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods:     []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Fn</span></span>
<span class="line"><span style="color:#E1E4E8;">    implemented: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Trait.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn is_builtin(self): bool</code><br> Returns whether Trait is built-in</p><p><code>fn find_method(mut self, ident: str): &amp;Fn</code><br> Returns method by identifier.<br> Returns nil reference if not exist any method in this identifier.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TypeAlias {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:     </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    used:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    generic:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:      Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:      </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeSymbol</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    refers:     []</span><span style="color:#F97583;">any</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Type alias.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TypeKind {</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    generic:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    variadic:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:      Kind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Type alias.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn cpp_linked(self): bool</code><br> Reports whether type is cpp-linked kind.</p><p><code>fn is_nil(self): bool</code><br> Reports whether kind is nil.</p><p><code>fn void(self): bool</code><br> Reports whether kind is void.</p><p><code>fn mut(self): bool</code><br> Reports whether kind is mutable.</p><p><code>fn nil_compatible(self): bool</code><br> Reports whether kind is nil compatible.</p><p><code>fn supports_cloning(self): bool</code><br> Reports whether kind supports clonning via jule::Clone derive.</p><p><code>fn variadicable(self): bool</code><br> Reports whether kind is variadicable.</p><p><code>fn prim(self): &amp;Prim</code><br> Returns primitive type if kind is primitive type, nil reference if not.</p><p><code>fn sptr(self): &amp;Sptr</code><br> Returns primitive type if kind is smart pointer, nil reference if not.</p><p><code>fn ptr(self): &amp;Ptr</code><br> Returns primitive type if kind is pointer, nil reference if not.</p><p><code>fn enm(self): &amp;Enum</code><br> Returns primitive type if kind is enum, nil reference if not.</p><p><code>fn arr(self): &amp;Arr</code><br> Returns primitive type if kind is array, nil reference if not.</p><p><code>fn slc(self): &amp;Slc</code><br> Returns primitive type if kind is slice, nil reference if not.</p><p><code>fn fnc(self): &amp;FnIns</code><br> Returns primitive type if kind is function, nil reference if not.</p><p><code>fn strct(self): &amp;Struct</code><br> Returns primitive type if kind is structure, nil reference if not.</p><p><code>fn trt(self): &amp;Trait</code><br> Returns primitive type if kind is trait, nil reference if not.</p><p><code>fn map(self): &amp;Map</code><br> Returns primitive type if kind is map, nil reference if not.</p><p><code>fn tup(self): &amp;Tuple</code><br> Returns primitive type if kind is tuple, nil reference if not.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TypeSymbol {</span></span>
<span class="line"><span style="color:#E1E4E8;">    decl: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Prim {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Primitive type.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn is_i8(self): bool</code><br> Reports whether type is primitive i8.</p><p><code>fn is_i16(self): bool</code><br> Reports whether type is primitive i16.</p><p><code>fn is_i32(self): bool</code><br> Reports whether type is primitive i32.</p><p><code>fn is_i64(self): bool</code><br> Reports whether type is primitive i64.</p><p><code>fn is_u8(self): bool</code><br> Reports whether type is primitive u8.</p><p><code>fn is_u16(self): bool</code><br> Reports whether type is primitive u16.</p><p><code>fn is_u32(self): bool</code><br> Reports whether type is primitive u32.</p><p><code>fn is_u64(self): bool</code><br> Reports whether type is primitive u64.</p><p><code>fn is_f32(self): bool</code><br> Reports whether type is primitive f32.</p><p><code>fn is_f64(self): bool</code><br> Reports whether type is primitive f64.</p><p><code>fn is_int(self): bool</code><br> Reports whether type is primitive int.</p><p><code>fn is_uint(self): bool</code><br> Reports whether type is primitive uint.</p><p><code>fn is_uintptr(self): bool</code><br> Reports whether type is primitive uintptr.</p><p><code>fn is_bool(self): bool</code><br> Reports whether type is primitive bool.</p><p><code>fn is_str(self): bool</code><br> Reports whether type is primitive str.</p><p><code>fn is_any(self): bool</code><br> Reports whether type is primitive any.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Slc {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Slice type.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Tuple {</span></span>
<span class="line"><span style="color:#E1E4E8;">    types: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Tuple type.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Map {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    val: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Map type.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Arr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Array type.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Ptr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Pointer type.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Kind</li></ul></div><p><strong>Methods:</strong></p><p><code>fn is_unsafe(self): bool</code><br> Reports whether pointer is unsafe pointer (*unsafe).</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> IterRelation {</span></span>
<span class="line"><span style="color:#E1E4E8;">    range: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Iteration relationship of variables. Stored only for indexing variable and ranged by variable.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Var {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:         </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:         Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:         </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    constant:      </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:        </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    used:          </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    statically:    </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    reference:     </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    directives:    []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Directive</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc:           </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:          </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeSymbol</span></span>
<span class="line"><span style="color:#E1E4E8;">    value:         </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Value</span></span>
<span class="line"><span style="color:#E1E4E8;">    references:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ReferenceStack</span></span>
<span class="line"><span style="color:#E1E4E8;">    iter_relation: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">IterRelation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This variable depended to these variables for initialization expression.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Nil if not global variable.</span></span>
<span class="line"><span style="color:#E1E4E8;">    depends:    []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>Variable.</p><p><strong>Methods:</strong></p><p><code>fn is_initialized(self): bool</code><br> Reports whether variable is initialized explicitly.</p><p><code>fn is_type_inferred(self): bool</code><br> Reports whether variable is type inferred.</p><h2 id="traits" tabindex="-1">Traits <a class="header-anchor" href="#traits" aria-label="Permalink to &quot;Traits&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Lookup {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Find imported package.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">find_package</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ImportInfo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Select imported package.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">select_package</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, selector: </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ImportInfo): </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ImportInfo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Find variable by identifier and cpp-linked state.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">find_var</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, cpp_linked: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Var</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Find type alias by identifier and cpp-linked state.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">find_type_alias</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, cpp_linked: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeAlias</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Find structure by identifier and cpp-linked state.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">find_struct</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, cpp_linked: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Struct</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Find function by identifier and cpp-linked state.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">find_fn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, cpp_linked: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Find trait by identifier.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">find_trait</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Trait</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Find enum by identifier.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns nil reference if did not found any match.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">find_enum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Enum</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>Lookup.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Importer {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns &amp;ImportInfo by path.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This function accepted as returns already imported and checked package.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If returns not-nil value, will be used instead of Import_package</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// if possible and package content is not checked by Sema.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">get_import</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ImportInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Path is the directory path of package to import.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Should return abstract syntax tree of package files.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Logs accepts as error.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">import_package</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): ([]</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Ast, []Log)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Invoked after the package is imported.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">imported</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ImportInfo)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Importer.<br> Used by semantic analyzer for import use declarations.</p><h2 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> SemaFlag</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Flags for semantic analysis.</p><p><strong>Fields:</strong></p><ul><li><code>Default</code>: Default semantic analysis of Jule.</li><li><code>Shadowing</code>: Default + enable shadowing.</li></ul>`,393),r=[p];function o(c,t,i,E,u,b){return n(),a("div",null,r)}const m=s(e,[["render",o]]);export{y as __pageData,m as default};
