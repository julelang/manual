import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Objective-C++","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/objective-cpp.md","filePath":"integrated-jule/objective-cpp.md"}'),p={name:"integrated-jule/objective-cpp.md"},l=e(`<h1 id="objective-c" tabindex="-1">Objective-C++ <a class="header-anchor" href="#objective-c" aria-label="Permalink to &quot;Objective-C++&quot;">​</a></h1><p>Objective-C++ implements Objective-C&#39;s plugins for C++. In this way, it becomes possible to use Objective-C elements with C++ codes. With Jule, you can use Objective-C++ like Objective-C.</p><h2 id="using" tabindex="-1">Using <a class="header-anchor" href="#using" aria-label="Permalink to &quot;Using&quot;">​</a></h2><p>You can create your header files with the extension <code>.h</code> in the standard way. But we recommended o use <code>.hpp</code> extension for C++ headers. These are does not pose any compatibility issues as it is one of the standard extensions supported by Jule.</p><p>For recommended development experience, declarations should be in the header file and implementation in another source code file. In this context, let&#39;s say we have Objective-C++ code like this:</p><p>Our <code>log.hpp</code>:</p><div class="language-objective-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">objective-cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#ifndef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LOG_HPP</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LOG_HPP</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#endif</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// LOG_HPP</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Our <code>log.mm</code>:</p><div class="language-objective-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">objective-cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;log.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NSString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [[</span><span style="color:#79B8FF;">NSString</span><span style="color:#E1E4E8;"> alloc] initWithUTF8String:text];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NSLog</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">@&quot;</span><span style="color:#79B8FF;">%@</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, log);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>We want to use above Objective-C++ code with Jule. The first thing we need to do is pass the <code>-framework Foundation</code> argument to the build command using the <code>jule:pass</code> top-directive. Otherwise, we will encounter a compilation error.</p><p>Then we link the definitions we want to use by linking the relevant header file and source code. Then we are ready to use it.</p><p>Our <code>main.jule</code>:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#pass</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-framework Foundation&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;log.hpp&quot;</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;log.mm&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> char: </span><span style="color:#F97583;">byte</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsafe</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(text: </span><span style="color:#F97583;">*cpp</span><span style="color:#E1E4E8;">.char)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(text: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsafe</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">*cpp</span><span style="color:#E1E4E8;">.char)(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">text[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])) }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Log from Jule!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The above code also has wrapper in a Jule for linked function. This increases safety and makes it easier to maintain the relevant function.</p></div>`,14),o=[l];function t(c,r,i,E,y,u){return n(),a("div",null,o)}const F=s(p,[["render",t]]);export{b as __pageData,F as default};
