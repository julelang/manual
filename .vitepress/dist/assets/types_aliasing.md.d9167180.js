import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Aliasing","description":"","frontmatter":{},"headers":[],"relativePath":"types/aliasing.md","filePath":"types/aliasing.md"}'),i={name:"types/aliasing.md"},l=n(`<h1 id="aliasing" tabindex="-1">Aliasing <a class="header-anchor" href="#aliasing" aria-label="Permalink to &quot;Aliasing&quot;">â€‹</a></h1><p>Type aliases is an alias for existing types defined by developer. When these aliases are used, they qualify the types they represent.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> int32: </span><span style="color:#F97583;">i32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> my_int: int32 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(my_int)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>As seen in the example above, there is an alias definition of <code>int32</code> for the <code>i32</code> data type. The keyword <code>type</code> comes first to define an alias. Then comes the name you want to give and which type it will represent. This alias will now represent <code>i32</code> when used.</p><p>In addition, it seems that this alias is used in variable definition. This is because the compiler recognizes the default types builtin. If your type alias represents a builtin definition, your type alias will not be detected as a type. For this reason, it is a more useful approach to specify specifically.</p><p>When defining a type alias, only the following types can be given as the type to represent:</p><ul><li>Builtin Data Types</li><li>Type Aliases</li></ul>`,8),t=[l];function p(o,r,c,d,y,h){return e(),a("div",null,t)}const E=s(i,[["render",p]]);export{m as __pageData,E as default};
