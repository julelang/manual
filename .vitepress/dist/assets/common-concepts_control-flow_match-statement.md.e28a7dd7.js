import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7cd3ab18.js";const d=JSON.parse('{"title":"Match Statements","description":"","frontmatter":{},"headers":[],"relativePath":"common-concepts/control-flow/match-statement.md","filePath":"common-concepts/control-flow/match-statement.md"}'),e={name:"common-concepts/control-flow/match-statement.md"},p=l(`<h1 id="match-statements" tabindex="-1">Match Statements <a class="header-anchor" href="#match-statements" aria-label="Permalink to &quot;Match Statements&quot;">​</a></h1><p>If you need to make a selection and run an algorithm based on that selection, <code>match</code> is a good choice. The operator <code>|</code> is used for each case. For a block to be executed if not exist any match, don&#39;t give any expression to one case, aka default case. The default case should be last case.</p><p><strong>Syntax</strong></p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> EXPRESSION {</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> CASE_EXPRESSION1: </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> CASE_EXPRESSION2: </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> CASE_EXPRESSION3: </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">:                  </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>EXPRESSION</strong>: Expression to match. <strong>CASE_EXPRESSION1</strong>: Expression for case. <strong>CASE_EXPRESSION2</strong>: Expression for another case. <strong>CASE_EXPRESSION3</strong>: Expression for another case. <strong>No expression case</strong>: Default block.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> my_integer {</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MY_INTEGER_MIN: </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Minimum&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MY_INTEGER_MAX: </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Maximum&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">:                </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Between or not&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="breaking-execution" tabindex="-1">Breaking Execution <a class="header-anchor" href="#breaking-execution" aria-label="Permalink to &quot;Breaking Execution&quot;">​</a></h3><p>As with iterations, you can break the execution of the block. The keyword <code>break</code> is sufficient for this.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> X {</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Y:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> Y </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> A {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Z:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="condition-chain" tabindex="-1">Condition Chain <a class="header-anchor" href="#condition-chain" aria-label="Permalink to &quot;Condition Chain&quot;">​</a></h3><p>If a match expression is not given, match acts like an if-else chain. This might be a more readable option on long condition chains.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">90</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> my_bool:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="multiple-cases" tabindex="-1">Multiple Cases <a class="header-anchor" href="#multiple-cases" aria-label="Permalink to &quot;Multiple Cases&quot;">​</a></h3><p>You can have a single algorithm for multiple cases. For this, you can give more than one expression for a case. The only addition in syntax is vline operator (<code>|</code>) between expressions.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> X {</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Y </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Z </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> V:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> B:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> C:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Body</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="the-fall-keyword" tabindex="-1">The <code>fall</code> Keyword <a class="header-anchor" href="#the-fall-keyword" aria-label="Permalink to &quot;The \`fall\` Keyword&quot;">​</a></h3><p>The fall keyword can only useable into case scopes and end of the scopes. It continues to next scope.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Case1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Case2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fall</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Case3&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fall</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Default&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Output:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">Case2</span></span>
<span class="line"><span style="color:#e1e4e8;">Case3</span></span>
<span class="line"><span style="color:#e1e4e8;">Default</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="type-matching" tabindex="-1">Type Matching <a class="header-anchor" href="#type-matching" aria-label="Permalink to &quot;Type Matching&quot;">​</a></h3><p>The <code>any</code> or <code>trait</code> data type may contain any data and you may want to execute different algorithms based on this data, in which case type matching is useful. You can also determine types of trait&#39;s data. Type matching is easy. Just use the keyword <code>type</code> and then use the data type in case to match.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> x {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;integer&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;floating-point&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;other&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="generic-matching" tabindex="-1">Generic Matching <a class="header-anchor" href="#generic-matching" aria-label="Permalink to &quot;Generic Matching&quot;">​</a></h3><p>Type-Math is also used to map generics. See the <a href="/types/generics.html#generic-type-matching">Generic Type Matching</a> section for more information about this.</p>`,31),o=[p];function c(t,r,i,E,y,u){return n(),a("div",null,o)}const m=s(e,[["render",c]]);export{d as __pageData,m as default};
