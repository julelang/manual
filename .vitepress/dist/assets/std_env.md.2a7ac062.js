import{_ as e,o as s,c as n,Q as a}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"std::env","description":"","frontmatter":{},"headers":[],"relativePath":"std/env.md","filePath":"std/env.md"}'),o={name:"std/env.md"},t=a('<h1 id="std-env" tabindex="-1">std::env <a class="header-anchor" href="#std-env" aria-label="Permalink to &quot;std::env&quot;">​</a></h1><h2 id="globals" tabindex="-1">Globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;Globals&quot;">​</a></h2><h3 id="const-arch-str" tabindex="-1"><code>const ARCH: str</code> <a class="header-anchor" href="#const-arch-str" aria-label="Permalink to &quot;`const ARCH: str`&quot;">​</a></h3><p>The running program&#39;s architecture target: one of i386, amd64 and so on.<br> To view possible combinations of OS, run <code>julec tool distarch</code></p><hr><h3 id="const-os-str" tabindex="-1"><code>const OS: str</code> <a class="header-anchor" href="#const-os-str" aria-label="Permalink to &quot;`const OS: str`&quot;">​</a></h3><p>The running program&#39;s operating system target: one of darwin, linux and so on.<br> To view possible combinations of OS, run <code>julec tool distos</code></p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;">(): []</span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns command-line arguments. Starts with the program name.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">env</span><span style="color:#E1E4E8;">(): []</span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns envrionment variables.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">working_dir</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns an absolute path name of the current working directory of the calling process.</p><p>Possible errors: <code>Denied</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">set_working_dir</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Changes the current working directory to the given directory.</p><p>Possible errors: <code>Denied</code> <code>IO</code> <code>Loop</code> <code>LongPath</code> <code>NotExist</code> <code>NotDir</code> <code>InsufficientMemory</code></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">executable</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns executable path.<br> Returns empty string if any error occurs.</p><h2 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h2><p><code>enum EnvError</code></p><p><strong>Fields:</strong></p><ul><li><code>Denied</code>: Search permission is denied for a component of the path prefix</li><li><code>IO</code>: Input/Output error, an error occurred while reading from the file system</li><li><code>Loop</code>: A loop exists in symbolic links encountered during resolution of the path argument</li><li><code>LongPath</code>: The length of the path argument exceeds maxium path length or a pathname component is longer than maximum name length</li><li><code>NotExist</code>: A component of path does not name an existing file or path is an empty string</li><li><code>NotDir</code>: A component of the path prefix is not a directory</li><li><code>InsufficientMemory</code>: Insufficient memory to complete the operation</li><li><code>Device</code>: Device did not respond</li></ul>',28),r=[t];function l(i,c,p,d,u,h){return s(),n("div",null,r)}const g=e(o,[["render",l]]);export{b as __pageData,g as default};
