import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Structures","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/interoperability/structures.md","filePath":"integrated-jule/interoperability/structures.md"}'),l={name:"integrated-jule/interoperability/structures.md"},p=e(`<h1 id="structures" tabindex="-1">Structures <a class="header-anchor" href="#structures" aria-label="Permalink to &quot;Structures&quot;">​</a></h1><h2 id="linking-c-structures" tabindex="-1">Linking C Structures <a class="header-anchor" href="#linking-c-structures" aria-label="Permalink to &quot;Linking C Structures&quot;">​</a></h2><p>As always, your links are reliable. Generics are supported in linking a structure. Not all fields have to be specified. If you&#39;re only going to use the struct by name, you can also declare it without the fields. The requirements here are limited to your needs and what needs to be declared for compliance.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    x: </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">    y: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>Your compiler will not automatically initialize with default value to fields that are not assigned in the struct literal for C++ linked structs.</li><li>If the linked structures have a constructor, the generated IR will have compilation errors.</li></ul></div><h3 id="c-structures-and-typedef-c-structures" tabindex="-1">C++ Structures and Typedef C Structures <a class="header-anchor" href="#c-structures-and-typedef-c-structures" aria-label="Permalink to &quot;C++ Structures and Typedef C Structures&quot;">​</a></h3><p>Structure linking is C-compliant by default. You can use the <code>typedef</code> directive to make this compatible with C++ or <code>typedef</code> C structures. The <code>typedef</code> directive enables generating compatible code for C++ and <code>typedef</code> C structures in code generation.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#typedef</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    x: </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">    y: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="linking-methods" tabindex="-1">Linking Methods <a class="header-anchor" href="#linking-methods" aria-label="Permalink to &quot;Linking Methods&quot;">​</a></h3><p>Your C++ structures may have methods and you want to link them to Jule. To do this, struct fields might be a trick for you. You can define struct fields with the name of your methods in the function type.</p><p>For example:</p><p>Our <code>mystruct.hpp</code> file:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyStruct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Str text;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;My text is: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Our <code>main.jule</code> file:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mystruct.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">#typedef</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> MyStruct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    text:      </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    my_method: </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.MyStruct{</span></span>
<span class="line"><span style="color:#E1E4E8;">        text: </span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ms.</span><span style="color:#79B8FF;">my_method</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><p>If the struct is a typedef, say it&#39;s a typedef with attribute <code>typedef</code> for correct linking:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#typedef</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><p>In C++, structs and classes are almost the same thing. A structure linking is typically class compatible. In other words, interoperability can also be used with classes struct linking.</p><p>For example:</p><p>The C++ class:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Str data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Str magic_data;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The Jule code:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#typedef</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> MyClass {</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    magic_data: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,28),t=[p];function r(o,c,i,u,d,E){return n(),a("div",null,t)}const m=s(l,[["render",r]]);export{b as __pageData,m as default};
