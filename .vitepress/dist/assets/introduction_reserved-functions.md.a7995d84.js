import{_ as n,o as e,c as a,Q as i}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Reserved Functions","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/reserved-functions.md","filePath":"introduction/reserved-functions.md"}'),t={name:"introduction/reserved-functions.md"},s=i(`<h1 id="reserved-functions" tabindex="-1">Reserved Functions <a class="header-anchor" href="#reserved-functions" aria-label="Permalink to &quot;Reserved Functions&quot;">​</a></h1><h2 id="entry-point" tabindex="-1">Entry Point <a class="header-anchor" href="#entry-point" aria-label="Permalink to &quot;Entry Point&quot;">​</a></h2><p>The entry point is the first routine that starts running when the program runs.<br> You must have a entry point. If you not have, code does not compile.</p><p>Jule&#39;s entry point function is <code>main</code> function.<br> Entry point is should be void function and not have any parameter.</p><p><br> For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Your entry point function body.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="initializer-function" tabindex="-1">Initializer Function <a class="header-anchor" href="#initializer-function" aria-label="Permalink to &quot;Initializer Function&quot;">​</a></h2><p>It is a one-time initialize function when a package is imported.<br> If you use it in your main program package, it will be executed before the entry point.</p><p>Jule&#39;s initialize function is <code>init</code> function.<br> Initializer function is should be void function and not have any parameter.</p><p><br> For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Your initialize function body.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="differences-of-entry-point-and-initializer-function" tabindex="-1">Differences of Entry Point and Initializer Function <a class="header-anchor" href="#differences-of-entry-point-and-initializer-function" aria-label="Permalink to &quot;Differences of Entry Point and Initializer Function&quot;">​</a></h2><p>The entry point is the main entry point of your program. The program starts executing from here. Without the entry point your code will not compile.</p><p>The initializer function is part of Jule&#39;s package system. The difference is that the initializer functions are called automatically when the package is imported. This function can be thought of as a kind of constructor function of packages. Therefore, all initializer functions are called before the entry point of program.</p>`,14),o=[s];function r(l,c,p,u,d,f){return e(),a("div",null,o)}const y=n(t,[["render",r]]);export{m as __pageData,y as default};
