import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const y=JSON.parse('{"title":"std::jule::ast","description":"","frontmatter":{},"headers":[],"relativePath":"std/jule-ast.md","filePath":"std/jule-ast.md"}'),l={name:"std/jule-ast.md"},p=e(`<h1 id="std-jule-ast" tabindex="-1">std::jule::ast <a class="header-anchor" href="#std-jule-ast" aria-label="Permalink to &quot;std::jule::ast&quot;">​</a></h1><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><h3 id="type-nodedata-any" tabindex="-1"><code>type NodeData: any</code> <a class="header-anchor" href="#type-nodedata-any" aria-label="Permalink to &quot;\`type NodeData: any\`&quot;">​</a></h3><p>Type of AST Node&#39;s data.</p><hr><h3 id="type-typedeclkind-any" tabindex="-1"><code>type TypeDeclKind: any</code> <a class="header-anchor" href="#type-typedeclkind-any" aria-label="Permalink to &quot;\`type TypeDeclKind: any\`&quot;">​</a></h3><p>Kind type of type declarations.</p><hr><h3 id="type-exprdata-any" tabindex="-1"><code>type ExprData: any</code> <a class="header-anchor" href="#type-exprdata-any" aria-label="Permalink to &quot;\`type ExprData: any\`&quot;">​</a></h3><p>Type of Expr&#39;s data.</p><hr><h3 id="type-iterkind-any" tabindex="-1"><code>type IterKind: any</code> <a class="header-anchor" href="#type-iterkind-any" aria-label="Permalink to &quot;\`type IterKind: any\`&quot;">​</a></h3><p>Type of Iter&#39;s kind.</p><h2 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Ast {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file:           </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    top_directives: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Directive</span></span>
<span class="line"><span style="color:#E1E4E8;">    use_decls:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">UseDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    impls:          []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Impl</span></span>
<span class="line"><span style="color:#E1E4E8;">    comments:       []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Comment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Possible types:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  &amp;EnumDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  &amp;FnDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  &amp;StructDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  &amp;TraitDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  &amp;TypeAliasDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  &amp;VarDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    decls: []Node</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Abstract syntax tree.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Node {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    data:  NodeData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>AST Node.</p><p><strong>Methods:</strong></p><p><code>fn is_decl(self): bool</code><br> Reports whether node data is declaration.</p><p><code>fn is_comment(self): bool</code><br> Reports whether node data is comment or comment group.</p><p><code>fn is_directive(self): bool</code><br> Reports whether node data is directive.</p><p><code>fn is_impl(self): bool</code><br> Reports whether node data is impl.</p><p><code>fn is_use_decl(self): bool</code><br> Reports whether node data is use declaration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> CommentGorup {</span></span>
<span class="line"><span style="color:#E1E4E8;">    comments: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Comment</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Comment group.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Comment {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    text:  </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Comment line.</p><p><strong>Methods:</strong></p><p><code>fn is_directive(self): bool</code><br> Reports whether comment is directive.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Directive {</span></span>
<span class="line"><span style="color:#E1E4E8;">    tag:  Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: []Token</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Directive.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:  TypeDeclKind</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Type declaration.<br> Also represents type expression.</p><p>For primitive types:</p><ul><li>Represented by IdentTypeDecl</li><li>Token&#39;s identity is data type</li><li>Primitive type kind is Ident</li></ul><p>For function types:</p><ul><li>Function types represented by &amp;FnDecl</li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> IdentTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:      Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:      </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:   []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Identifier type.</p><p><strong>Methods:</strong></p><p><code>fn is_prim(self): bool</code><br> Reports whether identifier is primitive type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> NamespaceTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    idents: []Token    </span><span style="color:#6A737D;">// Token from std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">IdentTypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Namespace chain type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SptrTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Smart pointer type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SlcTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Slice type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TupleTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    types: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Tuple type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> PtrTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Pointer type.</p><p><strong>Methods:</strong></p><p><code>fn is_unsafe(self): bool</code><br> Reports whether pointer is unsafe pointer (*unsafe).</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ArrTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    elem: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    size: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Array type.<br> Size expression is nil for auto-sized array.</p><p><strong>Methods:</strong></p><p><code>auto_sized(self): bool</code><br> Reports whether array is auto-sized.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> MapTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    val: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Map type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> RetTypeDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    idents: []Token </span><span style="color:#6A737D;">// Token from std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Return type.<br> Kind and idents is nil for void type.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Expr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> UseExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Use expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TupleExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Tuple expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> LitExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Literal expression.</p><p><strong>Methods:</strong></p><p><code>fn is_nil(self): bool</code><br> Reports whether literal is nil value.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> UnsafeExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:   ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Unsafe expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> CoExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Co expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> IdentExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:      Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:      </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Methods:</strong></p><p><code>fn is_self(self): bool</code><br> Reports whether identifier is self keyword.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> UnaryExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    op:   Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr: ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> VariadicExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Variadiced expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> CastExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr: ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Casting expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> NsSelectionExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ns:    []Token </span><span style="color:#6A737D;">// Token from std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Namespace identifier selection expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SubIdentExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    is_self: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:    ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:   Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Object sub identifier selection expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BinopExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    left:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    right: ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    op:    Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Binary operation.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FnCallExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:     Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:  []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    args:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">    exception: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Function call expression kind.</p><p><strong>Methods:</strong></p><p><code>fn unhandled(self): bool</code><br> Reports whether exception is not handled.</p><p><code>fn ignored(self): bool</code><br> Reports whether exception is ignored.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FieldExprPair {</span></span>
<span class="line"><span style="color:#E1E4E8;">    field: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Field-Expression pair.</p><p><strong>Methods:</strong></p><p><code>fn is_targeted(self): bool</code><br> Reports whether pair targeted field.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> StructLit {</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    exprs: []ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Struct literal instiating expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BraceLit {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    exprs: []ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Anonymous brace instiating expression.</p><p><strong>Methods:</strong></p><p><code>fn is_empty(self): bool</code><br> Reports whether literal is empty.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> KeyValPair {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key:   ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    val:   ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    colon: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Key-value pair expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SliceExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    elems: []ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Slice initiating expression.<br> Also represents array initiating expression.</p><p><strong>Methods:</strong></p><p><code>fn is_empty(self): bool</code><br> Reports whether slice is empty.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> IndexingExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    index: ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Indexing expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SlicingExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    start: ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    to:    ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Slicing expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TernaryExpr {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:      Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    condition:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    true_expr:  ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">    false_expr: ExprData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Ternary expression.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">struct GenericDecl {</span></span>
<span class="line"><span style="color:#e1e4e8;">    token: Token // From std::jule::lex</span></span>
<span class="line"><span style="color:#e1e4e8;">    ident: str</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Generic type declaration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> LabelSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Label statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> GotoSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    label: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Goto statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FallSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Fall statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> AssignLeft {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:     Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    reference: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:     </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Left expression of assign statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> AssignSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    declarative: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    setter:      Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    left:        []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">AssignLeft</span></span>
<span class="line"><span style="color:#E1E4E8;">    right:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Assign statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ScopeTree {</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">    unsafety: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    deferred: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    stmts:    []NodeData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Scope tree.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ParamDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:     Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    variadic:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    reference: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:      </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:     </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Parameter.</p><p><strong>Methods:</strong></p><p><code>fn is_self(self): bool</code><br> Reports whether parameter is self (receiver) parameter.</p><p><code>fn is_ref(self): bool</code><br> Reports whether self (receivers) parameter is reference.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FnDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:        Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    global:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    unsafety:     </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    statically:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    exceptional:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    directives:   []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Directive</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc_comments: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">CommentGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:     []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">GenericDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    result:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RetTypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    params:       []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ParamDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Function declaration.<br> Also represents anonymous function expression.</p><p><strong>Methods:</strong></p><p><code>fn is_anon(self): bool</code><br> Reports whether function is anonymous.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> VarDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree    </span><span style="color:#6A737D;">// nil for global scopes</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:        Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable:      </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    constant:     </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    statically:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    directives:   []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Directive</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc_comments: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">CommentGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:         </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl     </span><span style="color:#6A737D;">// nil for auto-typed</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:         </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Variable declaration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> RetSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Return statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Iter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:  IterKind</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Iteration.</p><p><strong>Methods:</strong></p><p><code>fn is_inf(self): bool</code><br> Reports whether iteration is infinity.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> WhileKind {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">    next:       NodeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    next_token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>While iteration kind.</p><p><strong>Methods:</strong></p><p><code>fn is_while_next(self): bool</code><br> Reports whether kind is while-next iteration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> RangeKind {</span></span>
<span class="line"><span style="color:#E1E4E8;">    in_token: Token     </span><span style="color:#6A737D;">// Token of &quot;in&quot; keyword, from std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:     </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">    key_a:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">VarDecl  </span><span style="color:#6A737D;">// first key of range</span></span>
<span class="line"><span style="color:#E1E4E8;">    key_b:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">VarDecl  </span><span style="color:#6A737D;">// second key of range</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Range iteration kind.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> BreakSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    label: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Break statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> ContSt {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    label: Token</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Continue statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> If {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If condition.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Else {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Else condition.</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Conditional {</span></span>
<span class="line"><span style="color:#E1E4E8;">    head:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">If</span></span>
<span class="line"><span style="color:#E1E4E8;">    tail:    []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">If</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Else</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Condition chain.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TypeAliasDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope:        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:        Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:         </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc_comments: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">CommentGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Type alias declaration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Case {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    scope: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ScopeTree</span></span>
<span class="line"><span style="color:#E1E4E8;">    exprs: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Case of match-case.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> MatchCase {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:      Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    type_match: </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:       </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr</span></span>
<span class="line"><span style="color:#E1E4E8;">    cases:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Case</span></span>
<span class="line"><span style="color:#E1E4E8;">    default:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Else</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Match-Case.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> UseDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:      Token       </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    link_path:  </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Use declaration path string.</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias:      </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    full:       </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Full implicit import.</span></span>
<span class="line"><span style="color:#E1E4E8;">    selected:   []Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Cpp header use declaration.</span></span>
<span class="line"><span style="color:#E1E4E8;">    std:        </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Standard package use declaration.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Use declaration statement.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> EnumItemDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: Token  </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    expr:  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Expr   </span><span style="color:#6A737D;">// Nil for auto expression.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Enum item.</p><p><strong>Methods:</strong></p><p><code>fn auto_expr(self): bool</code><br> Reports whether item has auto expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> EnumDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:        Token  </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:         </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    items:        []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">EnumItemDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc_comments: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">CommentGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Enum declaration.</p><p><strong>Methods:</strong></p><p><code>fn default_typed(self): bool</code><br> Reports whether enum&#39;s type is defualt.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FieldDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:   Token  </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutable: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// Interior mutability.</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:   </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind:    </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">TypeDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Field declaration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> StructDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:        Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    fields:       []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FieldDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpp_linked:   </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    directives:   []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Directive</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc_comments: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">CommentGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">    generics:     []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">GenericDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Structure declaration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> TraitDecl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    token:        Token </span><span style="color:#6A737D;">// From std::jule::lex</span></span>
<span class="line"><span style="color:#E1E4E8;">    ident:        </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    public:       </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    doc_comments: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">CommentGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods:      []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Trait declaration.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Impl {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This token available for these cases:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  - Implementation trait to structure, represents trait&#39;s token.</span></span>
<span class="line"><span style="color:#E1E4E8;">    base:    Token </span><span style="color:#6A737D;">// Token from std::jule::lex</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This token available for these cases:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  - Implementation trait to structure, represents structure&#39;s token.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  - Implementation to structure, represents structure&#39;s token.</span></span>
<span class="line"><span style="color:#E1E4E8;">    dest:    Token </span><span style="color:#6A737D;">// Token from std::jule::lex</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Given methods to implement.</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">FnDecl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Static varaibles to implement.</span></span>
<span class="line"><span style="color:#E1E4E8;">    statics: []</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">VarDecl</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Implementation.</p><p><strong>Methods:</strong></p><p><code>fn is_trait_impl(self): bool</code><br> Reports whether implementation type is trait to structure.</p><p><code>fn is_struct_impl(self): bool</code><br> Reports whether implementation type is append to destination structure.</p>`,255),r=[p];function o(c,t,i,E,u,b){return n(),a("div",null,r)}const m=s(l,[["render",o]]);export{y as __pageData,m as default};
