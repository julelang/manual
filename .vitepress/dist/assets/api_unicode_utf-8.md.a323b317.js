import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"UTF-8","description":"","frontmatter":{},"headers":[],"relativePath":"api/unicode/utf-8.md","filePath":"api/unicode/utf-8.md"}'),p={name:"api/unicode/utf-8.md"},o=e(`<h1 id="utf-8" tabindex="-1">UTF-8 <a class="header-anchor" href="#utf-8" aria-label="Permalink to &quot;UTF-8&quot;">​</a></h1><p>The <code>utf8.hpp</code> header of the API provides functionality for UTF-8 encoding.</p><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">signed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> UTF8_RUNE_ERROR;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The &quot;error&quot; rune or &quot;Unicode replacement character&quot;.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">signed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> UTF8_LOCB;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The default lowest continuation byte.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">signed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> UTF8_HICB;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The default highest continuation byte.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">signed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> UTF8_MAX_RUNE;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Maximum valid Unicode code point.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">signed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> UTF8_SURROGATE_MAX;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">signed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> UTF8_SURROGATE_MIN;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Code points in the surrogate range are not valid for UTF-8.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runes_to_utf8</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vector</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">I32</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">noexcept</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns string from UTF-8 bytes.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::tuple</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::I32, </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Int</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">utf8_decode_rune_str</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">s, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Int </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">len);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Unpacks the first UTF-8 encoding in s and returns the rune and its width in string. If s is empty it returns (RUNE_ERROR, 0). Otherwise, if the encoding is invalid, it returns (RUNE_ERROR, 1). Both are impossible results for correct, non-empty UTF-8.</p><p>An encoding is invalid if it is incorrect UTF-8, encodes a rune that is out of range, or is not the shortest possible UTF-8 encoding for the value. No other validation is performed.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::vector</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::U8</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">utf8_rune_to_bytes</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::I32 </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">r);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Returns byte slice for the UTF-8 encoding of the rune. If the rune is out of range, it writes the encoding of RUNE_ERROR. It returns bytes of rune.</p>`,28),l=[o];function t(r,c,i,d,E,u){return n(),a("div",null,l)}const h=s(p,[["render",t]]);export{b as __pageData,h as default};
