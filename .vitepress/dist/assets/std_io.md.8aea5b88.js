import{_ as e,o as s,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const f=JSON.parse('{"title":"std::io","description":"","frontmatter":{},"headers":[],"relativePath":"std/io.md","filePath":"std/io.md"}'),t={name:"std/io.md"},r=n('<h1 id="std-io" tabindex="-1">std::io <a class="header-anchor" href="#std-io" aria-label="Permalink to &quot;std::io&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stdin</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns File handler for stdin.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stdout</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns File handler for stdout.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stderr</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns File handler for stderr.</p><h2 id="traits" tabindex="-1">Traits <a class="header-anchor" href="#traits" aria-label="Permalink to &quot;Traits&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Reader</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reader trait mask for stream reader.</p><p><strong>Methods:</strong></p><p><code>pub fn read(mut self, mut buff: []byte)!: (n: int)</code><br> Read bytes to buffer from stream and returns readed byte count. The number of bytes readed can never exceed the length of the buff. If the buff is larger than the number of bytes that can be read, the buffer will not cause an overflow.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Writer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reader trait mask for stream writer.</p><p><strong>Methods:</strong></p><p><code>pub fn write(mut self, buff: []byte)!: (n: int)</code><br> Writes bytes to stream and returns writed byte count. The number of bytes written can never exceed the length of the buff.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Writer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Stream trait mask for R/W streams.</p><p><strong>Methods:</strong></p><p><code>pub fn read(mut self, mut buff: []byte)!: (n: int)</code><br> Derived from <code>Reader</code> trait.</p><p><code>pub fn write(mut self, buff: []byte)!: (n: int)</code><br> Derived from <code>Writer</code> trait.</p><h2 id="structures" tabindex="-1">Structures <a class="header-anchor" href="#structures" aria-label="Permalink to &quot;Structures&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> FileStream</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Stream implementation for file handles.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>Implemented Traits</strong></p><ul><li>Reader</li><li>Writer</li><li>Stream</li></ul></div><p><strong>Methods:</strong></p><p><code>fn read_line(mut self)!: []byte</code><br> Reads line from file handle via &amp;File.read method. Returns bytes until line delimiter (<code>\\n</code>) byte. Returns zero-length byte slice when reached EOF.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Scanner</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Scanner for files or etc. Scans bytes line-by-line.</p><p><strong>Methods:</strong></p><p><code>static fn new(mut r: Reader): &amp;Scanner</code><br> New <code>&amp;Scanner</code> from <code>Reader</code>.</p><p><code>static fn newf(mut f: &amp;File): &amp;Scanner</code><br> New <code>&amp;Scanner</code> from <code>&amp;File</code>. Uses <code>&amp;FileStream</code> for <code>Reader</code> trait compatibility.</p><p><code>fn bytes(self): []byte</code><br> Returns bytes of recent scan. Returned slice is mutable copy of buffer.</p><p><code>fn text(self): str</code><br> Returns text from bytes of recent scan.</p><p><code>fn scan(self)!: bool</code><br> Scans line from handle via read method. Scans bytes until line delimiter (<code>\\n</code>) byte, delimiter not included. Reports whether readed byte into buffer.</p>',41),o=[r];function l(i,p,c,d,u,b){return s(),a("div",null,o)}const h=e(t,[["render",l]]);export{f as __pageData,h as default};
