import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7cd3ab18.js";const u=JSON.parse('{"title":"Error Coding","description":"","frontmatter":{},"headers":[],"relativePath":"error-handling/error-coding.md","filePath":"error-handling/error-coding.md"}'),e={name:"error-handling/error-coding.md"},p=l(`<h1 id="error-coding" tabindex="-1">Error Coding <a class="header-anchor" href="#error-coding" aria-label="Permalink to &quot;Error Coding&quot;">â€‹</a></h1><p>Error coding is Jule&#39;s primary recommended method for error handling. In this method, integer constants are used to encode errors. Each integer is arranged to represent a unique error. The best way to accomplish this is to use an enum, a constant variable can be used depending on the developer&#39;s design preference.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> DivError {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ok,</span></span>
<span class="line"><span style="color:#E1E4E8;">    DividedByZero,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">my_div</span><span style="color:#E1E4E8;">(a: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, b: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): (</span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, DivError) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, DivError.DividedByZero</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">b, DivError.Ok</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (result, err) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">my_div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> err {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> DivError.DividedByZero:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error: divided by zero&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(result)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,4),r=[p];function o(c,t,E,i,y,d){return n(),a("div",null,r)}const m=s(e,[["render",o]]);export{u as __pageData,m as default};
