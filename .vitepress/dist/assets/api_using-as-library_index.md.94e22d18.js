import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"Using as Library","description":"","frontmatter":{},"headers":[],"relativePath":"api/using-as-library/index.md","filePath":"api/using-as-library/index.md"}'),e={name:"api/using-as-library/index.md"},o=l(`<h1 id="using-as-library" tabindex="-1">Using as Library <a class="header-anchor" href="#using-as-library" aria-label="Permalink to &quot;Using as Library&quot;">​</a></h1><p>You may want to use the API as a separate library. This is possible. The API is developed with pure C++, it has no dependencies.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>To install the API, you need to get the API source codes from the source code. For this, it is sufficient to obtain the <a href="https://github.com/julelang/jule/tree/master/api" target="_blank" rel="noreferrer"><code>api</code></a> directory in the root directory.</p><p>Then put this directory where you want to host it. You can change the name of the <code>api</code> directory to <code>jule</code> or something different if you wish.</p><p>All you have to do is have the header files, that&#39;s all. You are then ready to use it.</p><h2 id="using-and-compilation" tabindex="-1">Using and Compilation <a class="header-anchor" href="#using-and-compilation" aria-label="Permalink to &quot;Using and Compilation&quot;">​</a></h2><p>You don&#39;t need to make any changes to your build processes for the API. All header files contain all implementation.</p><p>Just include and use them:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;api/jule.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">setup_argv</span><span style="color:#E1E4E8;">(argc, argv);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Command line arguments:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Str arg: </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">args</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;  &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,10),p=[o];function t(r,c,i,E,y,u){return a(),n("div",null,p)}const b=s(e,[["render",t]]);export{h as __pageData,b as default};
