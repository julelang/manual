import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const f=JSON.parse('{"title":"std::math","description":"","frontmatter":{},"headers":[],"relativePath":"std/math.md","filePath":"std/math.md"}'),l={name:"std/math.md"},o=e('<h1 id="std-math" tabindex="-1">std::math <a class="header-anchor" href="#std-math" aria-label="Permalink to &quot;std::math&quot;">​</a></h1><h2 id="globals" tabindex="-1">Globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;Globals&quot;">​</a></h2><h3 id="const-e-f64" tabindex="-1"><code>const E: f64</code> <a class="header-anchor" href="#const-e-f64" aria-label="Permalink to &quot;`const E: f64`&quot;">​</a></h3><hr><h3 id="const-pi-f64" tabindex="-1"><code>const PI: f64</code> <a class="header-anchor" href="#const-pi-f64" aria-label="Permalink to &quot;`const PI: f64`&quot;">​</a></h3><hr><h3 id="const-phi-f64" tabindex="-1"><code>const PHI: f64</code> <a class="header-anchor" href="#const-phi-f64" aria-label="Permalink to &quot;`const PHI: f64`&quot;">​</a></h3><hr><h3 id="const-sqrt2-f64" tabindex="-1"><code>const SQRT2: f64</code> <a class="header-anchor" href="#const-sqrt2-f64" aria-label="Permalink to &quot;`const SQRT2: f64`&quot;">​</a></h3><hr><h3 id="const-sqrt-e-f64" tabindex="-1"><code>const SQRT_E: f64</code> <a class="header-anchor" href="#const-sqrt-e-f64" aria-label="Permalink to &quot;`const SQRT_E: f64`&quot;">​</a></h3><hr><h3 id="const-sqrt-pi-f64" tabindex="-1"><code>const SQRT_PI: f64</code> <a class="header-anchor" href="#const-sqrt-pi-f64" aria-label="Permalink to &quot;`const SQRT_PI: f64`&quot;">​</a></h3><hr><h3 id="const-sqrt-phi-f64" tabindex="-1"><code>const SQRT_PHI: f64</code> <a class="header-anchor" href="#const-sqrt-phi-f64" aria-label="Permalink to &quot;`const SQRT_PHI: f64`&quot;">​</a></h3><hr><h3 id="const-ln2-f64" tabindex="-1"><code>const LN2: f64</code> <a class="header-anchor" href="#const-ln2-f64" aria-label="Permalink to &quot;`const LN2: f64`&quot;">​</a></h3><hr><h3 id="const-log-2e-f64" tabindex="-1"><code>const LOG_2E: f64</code> <a class="header-anchor" href="#const-log-2e-f64" aria-label="Permalink to &quot;`const LOG_2E: f64`&quot;">​</a></h3><hr><h3 id="const-ln10-f64" tabindex="-1"><code>const LN10: f64</code> <a class="header-anchor" href="#const-ln10-f64" aria-label="Permalink to &quot;`const LN10: f64`&quot;">​</a></h3><hr><h3 id="const-log-10e-f64" tabindex="-1"><code>const LOG_10E: f64</code> <a class="header-anchor" href="#const-log-10e-f64" aria-label="Permalink to &quot;`const LOG_10E: f64`&quot;">​</a></h3><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">abs</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the absolute value of x.</p><p>Special cases are:</p><ul><li><code>abs(±inf) = +inf</code></li><li><code>abs(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">acosh</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the inverse hyperbolic cosine of x.</p><p>Special cases are:</p><ul><li><code>acosh(+inf) = +inf</code></li><li><code>acosh(x) = nan if x &lt; 1</code></li><li><code>acosh(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">asin</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the arcsine, in radians, of x.</p><p>Special cases are:</p><ul><li><code>asin(±0) = ±0</code></li><li><code>asin(x) = nan if x &lt; -1 or x &gt; 1</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">acos</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the arccosine, in radians, of x.</p><p>Special cases are:</p><ul><li><code>acos(x) = nan if x &lt; -1 or x &gt; 1</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">asinh</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the inverse hyperbolic sine of x.</p><p>Special cases are:</p><ul><li><code>asinh(±0) = ±0</code></li><li><code>asinh(±inf) = ±inf</code></li><li><code>asinh(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">atan</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the arctangent, in radians, of x.</p><p>Special cases are:</p><ul><li><code>atan(±0) = ±0</code></li><li><code>atan(±inf) = ±PI/2</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">atan2</span><span style="color:#E1E4E8;">(y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the arc tangent of y/x, using the signs of the two to determine the quadrant of the return value.</p><p>Special cases are:</p><ul><li><code>atan2(y, nan) = nan</code></li><li><code>atan2(nan, x) = nan</code></li><li><code>atan2(+0, x&gt;=0) = +0</code></li><li><code>atan2(-0, x&gt;=0) = -0</code></li><li><code>atan2(+0, x&lt;=-0) = +PI</code></li><li><code>atan2(-0, x&lt;=-0) = -PI</code></li><li><code>atan2(y&gt;0, 0) = +PI/2</code></li><li><code>atan2(y&lt;0, 0) = -PI/2</code></li><li><code>atan2(+inf, +inf) = +PI/4</code></li><li><code>atan2(-inf, +inf) = -PI/4</code></li><li><code>atan2(+inf, -inf) = 3PI/4</code></li><li><code>atan2(-inf, -inf) = -3PI/4</code></li><li><code>atan2(y, +inf) = 0</code></li><li><code>atan2(y&gt;0, -inf) = +PI</code></li><li><code>atan2(y&lt;0, -inf) = -PI</code></li><li><code>atan2(+inf, x) = +PI/2</code></li><li><code>atan2(-inf, x) = -PI/2</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">atanh</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the inverse hyperbolic tangent of x.</p><p>Special cases are:</p><ul><li><code>atanh(1) = +inf</code></li><li><code>atanh(±0) = ±0</code></li><li><code>atanh(-1) = -inf</code></li><li><code>atanh(x) = nan if x &lt; -1 or x &gt; 1</code></li><li><code>atanh(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nan</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns an IEEE 754 “not-a-number” value.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_nan</span><span style="color:#E1E4E8;">(f: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether f is an IEEE 754 “not-a-number” value.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_nan</span><span style="color:#E1E4E8;">(f: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns positive infinity if sign &gt;= 0, negative infinity if !sign &lt; 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_inf</span><span style="color:#E1E4E8;">(f: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, sign: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether f is an infinity, according to sign.<br> If sign &gt; 0, is_inf reports whether f is positive infinity.<br> If sign &lt; 0, is_inf reports whether f is negative infinity.<br> If sign == 0, is_inf reports whether f is either infinity.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cbrt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the cube root of x.</p><p>Special cases are:</p><ul><li><code>cbrt(±0) = ±0</code></li><li><code>cbrt(±inf) = ±inf</code></li><li><code>cbrt(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">copysign</span><span style="color:#E1E4E8;">(f: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, sign: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns a value with the magnitude of f and the sign of sign.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dim</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the maximum of x-y or 0.</p><p>Special cases are:</p><ul><li><code>dim(+inf, +inf) = nan</code></li><li><code>dim(-inf, -inf) = nan</code></li><li><code>dim(x, nan) = dim(nan, x) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the larger of x or y.</p><p>Special cases are:</p><ul><li><code>max(x, +inf) = max(+inf, x) = +inf</code></li><li><code>max(x, nan) = max(nan, x) = nan</code></li><li><code>max(+0, ±0) = max(±0, +0) = +0</code></li><li><code>max(-0, -0) = -0</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">min</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the smaller of x or y.</p><p>Special cases are:</p><ul><li><code>min(x, -inf) = min(-inf, x) = -inf</code></li><li><code>min(x, nan) = min(nan, x) = nan</code></li><li><code>min(-0, ±0) = min(±0, -0) = -0</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">erf</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the error function of x.</p><p>Special cases are:</p><ul><li><code>erf(+inf) = 1</code></li><li><code>erf(-inf) = -1</code></li><li><code>erf(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">erfinv</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the inverse error function of x.</p><p>Special cases are:</p><ul><li><code>erfinv(1) = +inf</code></li><li><code>erfinv(-1) = -inf</code></li><li><code>erfinv(x) = nan if x &lt; -1 or x &gt; 1</code></li><li><code>erfinv(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">erfcinv</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the inverse of erfc(x).</p><p>Special cases are:</p><ul><li><code>erfcinv(0) = +inf</code></li><li><code>erfcinv(2) = -inf</code></li><li><code>erfcinv(x) = nan if x &lt; 0 or x &gt; 2</code></li><li><code>erfcinv(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">erfc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the complementary error function of x.</p><p>Special cases are:</p><ul><li><code>erfc(+inf) = 0</code></li><li><code>erfc(-inf) = 2</code></li><li><code>erfc(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exp</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns e**x, the base-e exponential of x.</p><p>Special cases are:</p><ul><li><code>exp(+inf) = +inf</code></li><li><code>exp(nan) = nan</code></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>Very large values overflow to 0 or inf.</li><li>Very small values underflow to 1.</li></ul></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exp2</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns 2**x, the base-2 exponential of x. Special cases are the same as exp.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">expm1</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns e**x - 1, the base-e exponential of x minus 1. It is more accurate than exp(x) - 1 when x is near zero.</p><p>Special cases are:</p><ul><li><code>expm1(+inf) = +inf</code></li><li><code>expm1(-inf) = -1</code></li><li><code>expm1(nan) = nan</code></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Very large values overflow to -1 or inf.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">floor</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the greatest integer value less than or equal to x.</p><p>Special cases are:</p><ul><li><code>floor(±0) = ±0</code></li><li><code>floor(±inf) = ±inf</code></li><li><code>floor(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fma</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, z: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns x * y + z, computed with only one rounding. (That is, fma returns the fused multiply-add of x, y, and z.)</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">frexp</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> f: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): (frac: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, exp: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Breaks f into a normalized fraction and an integral power of two. It returns frac and exp satisfying f == frac × 2**exp, with the absolute value of frac in the interval <code>[½, 1)</code>.</p><p>Special cases are:</p><ul><li><code>frexp(±0) = ±0, 0</code></li><li><code>frexp(±inf) = ±inf, 0</code></li><li><code>frexp(nan) = nan, 0</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gamma</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the gamma function of x.</p><p>Special cases are:</p><ul><li><code>gamma(+inf) = +inf</code></li><li><code>gamma(+0) = +inf</code></li><li><code>gamma(-0) = -inf</code></li><li><code>gamma(x) = nan for integer x &lt; 0</code></li><li><code>gamma(-inf) = nan</code></li><li><code>gamma(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ceil</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the least integer value greater than or equal to x.</p><p>Special cases are:</p><ul><li><code>ceil(±0) = ±0</code></li><li><code>ceil(±inf) = ±inf</code></li><li><code>ceil(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trunc</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the integer value of x.</p><p>Special cases are:</p><ul><li><code>trunc(±0) = ±0</code></li><li><code>trunc(±inf) = ±inf</code></li><li><code>trunc(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">round</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the nearest integer, rounding half away from zero.</p><p>Special cases are:</p><ul><li><code>round(±0) = ±0</code></li><li><code>round(±inf) = ±inf</code></li><li><code>round(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">round_even</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the nearest integer, rounding ties to even.</p><p>Special cases are:</p><ul><li><code>round_even(±0) = ±0</code></li><li><code>round_even(±inf) = ±inf</code></li><li><code>round_even(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hypot</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> p: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> q: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns sqrt(p<em>p + q</em>q), taking care to avoid unnecessary overflow and underflow.</p><p>Special cases are:</p><ul><li><code>hypot(±inf, q) = +inf</code></li><li><code>hypot(p, ±inf) = +inf</code></li><li><code>hypot(nan, q) = nan</code></li><li><code>hypot(p, nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">j0</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the order-zero Bessel function of the first kind.</p><p>Special cases are:</p><ul><li><code>j0(±inf) = 0</code></li><li><code>j0(0) = 1</code></li><li><code>j0(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">y0</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the order-zero Bessel function of the second kind.</p><p>Special cases are:</p><ul><li><code>y0(+inf) = 0</code></li><li><code>y0(0) = -inf</code></li><li><code>y0(x &lt; 0) = nan</code></li><li><code>y0(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">j1</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the order-one Bessel function of the first kind.</p><p>Special cases are:</p><ul><li><code>j1(±inf) = 0</code></li><li><code>j1(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">y1</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the order-one Bessel function of the second kind.</p><p>Special cases are:</p><ul><li><code>y1(+inf) = 0</code></li><li><code>y1(0) = -inf</code></li><li><code>y1(x &lt; 0) = nan</code></li><li><code>y1(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> n: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the order-n Bessel function of the first kind.</p><p>Special cases are:</p><ul><li><code>jn(n, ±inf) = 0</code></li><li><code>jn(n, nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">yn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> n: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the order-n Bessel function of the second kind.</p><p>Special cases are:</p><ul><li><code>yn(n, +inf) = 0</code></li><li><code>yn(n ≥ 0, 0) = -inf</code></li><li><code>yn(n &lt; 0, 0) = +inf if n is odd, -inf if n is even</code></li><li><code>yn(n, x &lt; 0) = nan</code></li><li><code>yn(n, nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ldexp</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> frac: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> exp: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Is the inverse of frexp. It returns frac × 2**exp.</p><p>Special cases are:</p><ul><li><code>ldexp(±0, exp) = ±0</code></li><li><code>ldexp(±inf, exp) = ±inf</code></li><li><code>ldexp(nan, exp) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lgamma</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): (lgamma: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, sign: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the natural logarithm and sign (-1 or +1) of gamma(x).</p><p>Special cases are:</p><ul><li><code>lgamma(+inf) = +inf</code></li><li><code>lgamma(0) = inf</code></li><li><code>lgamma(-integer) = +inf</code></li><li><code>lgamma(-inf) = -inf</code></li><li><code>lgamma(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">log</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the natural logarithm of x.</p><p>Special cases are:</p><ul><li><code>log(+inf) = +inf</code></li><li><code>log(0) = -inf</code></li><li><code>log(x &lt; 0) = nan</code></li><li><code>log(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">log1p</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the natural logarithm of 1 plus its argument x. It is more accurate than log(1 + x) when x is near zero.</p><p>Special cases are:</p><ul><li><code>log1p(+inf) = +inf</code></li><li><code>log1p(±0) = ±0</code></li><li><code>log1p(-1) = -inf</code></li><li><code>log1p(x &lt; -1) = nan</code></li><li><code>log1p(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">log10</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the decimal logarithm of x. The special cases are the same as for log.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">log2</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the binary logarithm of x. The special cases are the same as for log.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">logb</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the binary exponent of x.</p><p>Special cases are:</p><ul><li><code>logb(±inf) = +inf</code></li><li><code>logb(0) = -inf</code></li><li><code>logb(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ilogb</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the binary exponent of x as an integer.</p><p>Special cases are:</p><ul><li><code>ilogb(±inf) = i32.max</code></li><li><code>ilogb(0) = i32.min</code></li><li><code>ilogb(nan) = i32.max</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mod</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the floating-point remainder of x/y. The magnitude of the result is less than y and its sign agrees with that of x.</p><p>Special cases are:</p><ul><li><code>mod(±inf, y) = nan</code></li><li><code>mod(nan, y) = nan</code></li><li><code>mod(x, 0) = nan</code></li><li><code>mod(x, ±inf) = x</code></li><li><code>mod(x, nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modf</span><span style="color:#E1E4E8;">(f: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): (integer: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, frac: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns integer and fractional floating-point numbers that sum to f. Both values have the same sign as f.</p><p>Special cases are:</p><ul><li><code>modf(±inf) = ±inf, nan</code></li><li><code>modf(nan) = nan, nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nextafter32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">): (r: </span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the next representable f32 value after x towards y.</p><p>Special cases are:</p><ul><li><code>nextafter32(x, x) = x</code></li><li><code>nextafter32(nan, y) = nan</code></li><li><code>nextafter32(x, nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nextafter</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): (r: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the next representable f64 value after x towards y.</p><p>Special cases are:</p><ul><li><code>nextafter(x, x) = x</code></li><li><code>nextafter(nan, y) = nan</code></li><li><code>nextafter(x, nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns x**y, the base-x exponential of y.</p><p>Special cases are:</p><ul><li><code>pow(x, ±0) = 1 for any x</code></li><li><code>pow(1, y) = 1 for any y</code></li><li><code>pow(x, 1) = x for any x</code></li><li><code>pow(nan, y) = nan</code></li><li><code>pow(x, nan) = nan</code></li><li><code>pow(±0, y) = ±inf for y an odd integer &lt; 0</code></li><li><code>pow(±0, -inf) = inf</code></li><li><code>pow(±0, +inf) = +0</code></li><li><code>pow(±0, y) = +inf for finite y &lt; 0 and not an odd integer</code></li><li><code>pow(±0, y) = ±0 for y an odd integer &gt; 0</code></li><li><code>pow(±0, y) = +0 for finite y &gt; 0 and not an odd integer</code></li><li><code>pow(-1, ±inf) = 1</code></li><li><code>pow(x, +inf) = +inf for |x| &gt; 1</code></li><li><code>pow(x, -inf) = +0 for |x| &gt; 1</code></li><li><code>pow(x, inf) = +0 for |x| &lt; 1</code></li><li><code>pow(x, -inf) = +inf for |x| &lt; 1</code></li><li><code>pow(+inf, y) = +inf for y &gt; 0</code></li><li><code>pow(+inf, y) = +0 for y &lt; 0</code></li><li><code>pow(-inf, y) = pow(-0, -y)</code></li><li><code>pow(x, y) = nan for finite x &lt; 0 and finite non-integer y</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pow10</span><span style="color:#E1E4E8;">(n: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns 10**n, the base-10 exponential of n.</p><p>Special cases are:</p><ul><li><code>pow10(n) = 0 for n &lt; -323</code></li><li><code>pow10(n) = +inf for n &gt; 308</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">remainder</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> y: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the IEEE 754 floating-point remainder of x/y.</p><p>Special cases are:</p><ul><li><code>remainder(±inf, y) = nan</code></li><li><code>remainder(nan, y) = nan</code></li><li><code>remainder(x, 0) = nan</code></li><li><code>remainder(x, ±inf) = x</code></li><li><code>remainder(x, nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">signbit</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether x is negative or negative zero.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cos</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the cosine of the radian argument x.</p><p>Special cases are:</p><ul><li><code>cos(±inf) = nan</code></li><li><code>cos(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sin</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the sine of the radian argument x.</p><p>Special cases are:</p><ul><li><code>sin(±0) = ±0</code></li><li><code>sin(±inf) = nan</code></li><li><code>sin(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sincos</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): (sin: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">, cos: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns sin(x), cos(x).</p><p>Special cases are:</p><ul><li><code>sincos(±0) = ±0, 1</code></li><li><code>sincos(±inf) = nan, nan</code></li><li><code>sincos(nan) = nan, nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sinh</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the hyperbolic sine of x.</p><p>Special cases are:</p><ul><li><code>sinh(±0) = ±0</code></li><li><code>sinh(±inf) = ±inf</code></li><li><code>sinh(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cosh</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the hyperbolic cosine of x.</p><p>Special cases are:</p><ul><li><code>cosh(±0) = 1</code></li><li><code>cosh(±inf) = +inf</code></li><li><code>cosh(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sqrt</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the square root of x.</p><p>Special cases are:</p><ul><li><code>sqrt(+inf) = +inf</code></li><li><code>sqrt(±0) = ±0</code></li><li><code>sqrt(x &lt; 0) = nan</code></li><li><code>sqrt(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tan</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the tangent of the radian argument x.</p><p>Special cases are:</p><ul><li><code>tan(±0) = ±0</code></li><li><code>tan(±inf) = nan</code></li><li><code>tan(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tanh</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the hyperbolic tangent of x.</p><p>Special cases are:</p><ul><li><code>tanh(±0) = ±0</code></li><li><code>tanh(±inf) = ±1</code></li><li><code>tanh(nan) = nan</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">f32_bits</span><span style="color:#E1E4E8;">(f: </span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position. <code>f32_bits(f32_from_bits(x)) == x</code>.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">f32_from_bits</span><span style="color:#E1E4E8;">(b: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. <code>f32_from_bits(f32_bits(x)) == x</code>.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">f64_bits</span><span style="color:#E1E4E8;">(f: </span><span style="color:#F97583;">f64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position. <code>f64_bits(f64_from_bits(x)) == x</code>.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">f64_from_bits</span><span style="color:#E1E4E8;">(b: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. <code>f64_from_bits(f64_bits(x)) == x</code>.</p>',332),p=[o];function c(i,r,t,d,u,y){return n(),a("div",null,p)}const b=s(l,[["render",c]]);export{f as __pageData,b as default};
