import{_ as s,o as e,c as a,Q as t}from"./chunks/framework.7cd3ab18.js";const E=JSON.parse('{"title":"Destructor Methods","description":"","frontmatter":{},"headers":[],"relativePath":"common-concepts/structures/destructors.md","filePath":"common-concepts/structures/destructors.md"}'),o={name:"common-concepts/structures/destructors.md"},n=t(`<h1 id="destructor-methods" tabindex="-1">Destructor Methods <a class="header-anchor" href="#destructor-methods" aria-label="Permalink to &quot;Destructor Methods&quot;">​</a></h1><p>Destructor methods are methods that are called automatically when created instances of structures are destroyed. It is usually used when there is a memory space that needs to be freed, or in similar circumstances.</p><p>Destructor methods are called automatically even on immutable instances. There is no harm in mutable operation since it is out of scope. But the need for mutability can arise when you want to call the method manually.</p><h2 id="the-dispose-trait" tabindex="-1">The Dispose Trait <a class="header-anchor" href="#the-dispose-trait" aria-label="Permalink to &quot;The Dispose Trait&quot;">​</a></h2><p>Jule has a built-in <code>Dispose</code> trait. To obtain a destructor method, it is necessary to implement the <code>Dispose</code> trait. Structures that implement this trait have a <code>dispose</code> method. This method is the destructor method and is called automatically when the build instances are destroyed.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> Dispose </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> MyStruct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dispose</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,7),r=[n];function l(c,p,i,d,u,h){return e(),a("div",null,r)}const y=s(o,[["render",l]]);export{E as __pageData,y as default};
