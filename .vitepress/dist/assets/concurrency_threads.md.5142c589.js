import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Threads","description":"","frontmatter":{},"headers":[],"relativePath":"concurrency/threads.md","filePath":"concurrency/threads.md"}'),e={name:"concurrency/threads.md"},p=l(`<h1 id="threads" tabindex="-1">Threads <a class="header-anchor" href="#threads" aria-label="Permalink to &quot;Threads&quot;">â€‹</a></h1><p>There is a standard library <code>std::thread</code> to create and manage threads. This library allows you to create native OS threads. In some cases, it may be more useful than the concurrency provided by the <code>co</code> keyword.</p><p>Below you can see the example shown in the <a href="/concurrency/atomicity.html">Atomicity</a> section using Thread:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::thread::{Thread}</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::sync::{WaitGroup}</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::sync::atomic::{AtomicInt, MemoryOrder}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> n: AtomicInt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AtomicInt.</span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add_to_n</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">wg: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">WaitGroup) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> { wg.</span><span style="color:#79B8FF;">done</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">    n.</span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, MemoryOrder.Relaxed)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> wg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">WaitGroup{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        wg.</span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#79B8FF;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">add_to_n</span><span style="color:#E1E4E8;">(wg)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }).</span><span style="color:#79B8FF;">detach</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    wg.</span><span style="color:#79B8FF;">wait</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(n.</span><span style="color:#79B8FF;">load</span><span style="color:#E1E4E8;">(MemoryOrder.Relaxed))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>In the example above, the function is called for each Thread detach created. This is important to ensure that it matches the concurrency of the <code>co</code> keyword as much as possible. Because the threads created by the <code>co</code> keyword are like this.</p>`,5),o=[p];function r(c,t,E,y,i,d){return n(),a("div",null,o)}const b=s(e,[["render",r]]);export{m as __pageData,b as default};
