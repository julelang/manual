import{_ as e,o as a,c as s,Q as n}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Header Files","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/interoperability/header-files.md","filePath":"integrated-jule/interoperability/header-files.md"}'),l={name:"integrated-jule/interoperability/header-files.md"},o=n('<h1 id="header-files" tabindex="-1">Header Files <a class="header-anchor" href="#header-files" aria-label="Permalink to &quot;Header Files&quot;">​</a></h1><h2 id="linking-header-files" tabindex="-1">Linking Header Files <a class="header-anchor" href="#linking-header-files" aria-label="Permalink to &quot;Linking Header Files&quot;">​</a></h2><p>The use declarations of Jule are used to include C++ headers in the Jule code to be generated. It&#39;s just a little different. A use declaration should be told that this is a C++ include and the path should be given as a string.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;stdlib.h&gt;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;iostream&gt;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;header.hpp&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The correctness and validity of the file path is checked by the compiler. Valid header extensions; <code>.h</code>, <code>.hh</code>, <code>.hpp</code>, <code>.hxx</code></p><h2 id="linkind-header-implementations" tabindex="-1">Linkind Header Implementations <a class="header-anchor" href="#linkind-header-implementations" aria-label="Permalink to &quot;Linkind Header Implementations&quot;">​</a></h2><p>You may not write your header files to include all the code (with implementation of declarations). Typical usage is in the form of a header file and a separate source code file for implementation of declarations. For this reason, you can also link your implementation C++ source code files just like header files.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myfile.cpp&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;implementation.cxx&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The correctness and validity of the file path is checked by the compiler. Valid source file extensions; <code>.cpp</code>, <code>.cc</code>, <code>.cxx</code>, <code>.c</code>, <code>.mm</code></p>',14),i=[o];function t(r,p,c,d,u,h){return a(),s("div",null,i)}const y=e(l,[["render",t]]);export{b as __pageData,y as default};
