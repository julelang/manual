import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Exporting Definitions","description":"","frontmatter":{},"headers":[],"relativePath":"packages/3rd-party-packages/exporting-definitions.md","filePath":"packages/3rd-party-packages/exporting-definitions.md"}'),p={name:"packages/3rd-party-packages/exporting-definitions.md"},l=e(`<h1 id="exporting-definitions" tabindex="-1">Exporting Definitions <a class="header-anchor" href="#exporting-definitions" aria-label="Permalink to &quot;Exporting Definitions&quot;">​</a></h1><p>Packages have access to any definition they have. But this does not apply to packages that use a package. Only exported definitions are accessible when a package is used. This is a kind of safety. When publicly-closed/internal package definitions that should not be used are not exported, they cannot be accessed from the outside and this possibility is eliminated. This is the most basic purpose of the export mechanism.</p><p>The keyword pub is used to specify exportable public-use definitions of a package.<br> Otherwise, all definitions are private by default.</p><p>You can mark public these kind of definitions:</p><ul><li>Global</li><li>Function</li><li>Enum</li><li>Struct</li><li>Struct Field</li><li>Type Alias</li><li>Trait</li></ul><p>For example to public definitions:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The <code>add</code> function is private.<br> With the keyword <code>pub</code>, you can public definition.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The <code>add</code> function is public now.</p><h2 id="implicit-export" tabindex="-1">Implicit Export <a class="header-anchor" href="#implicit-export" aria-label="Permalink to &quot;Implicit Export&quot;">​</a></h2><p>Implicit export is when definitions that are not explicitly defined as public are implicitly served as public by another public definition. For example, a private struct can have public fields. But since the struct is private, it cannot be accessed from outside the package. A wrapper function that provides this can access the struct and return an instance of it because it is in its own package. This is an implicit export.</p><p>For example, the package <code>foo</code>:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> MyStruct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> number: </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new_mystruct</span><span style="color:#E1E4E8;">(number: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): MyStruct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> MyStruct{</span></span>
<span class="line"><span style="color:#E1E4E8;">        number: number,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Your code:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> foo::{new_mystruct}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new_mystruct</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(ms.number)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>As shown in the example above, your code accessed a private struct via a public function and used the public field. This means that that definition is implicitly exported.</p>`,18),o=[l];function t(i,r,c,d,u,E){return n(),a("div",null,o)}const m=s(p,[["render",t]]);export{b as __pageData,m as default};
