import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"std::math::bits","description":"","frontmatter":{},"headers":[],"relativePath":"std/math-bits.md","filePath":"std/math-bits.md"}'),l={name:"std/math-bits.md"},o=e('<h1 id="std-math-bits" tabindex="-1">std::math::bits <a class="header-anchor" href="#std-math-bits" aria-label="Permalink to &quot;std::math::bits&quot;">​</a></h1><h2 id="globals" tabindex="-1">Globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;Globals&quot;">​</a></h2><h3 id="const-uint-size" tabindex="-1"><code>const UINT_SIZE</code> <a class="header-anchor" href="#const-uint-size" aria-label="Permalink to &quot;`const UINT_SIZE`&quot;">​</a></h3><p>Is the size of a uint in bits.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leading_zeros</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of leading zero bits in x; the result is UINT_SIZE for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leading_zeros8</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of leading zero bits in x; the result is 8 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leading_zeros16</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u16</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of leading zero bits in x; the result is 16 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leading_zeros32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of leading zero bits in x; the result is 32 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leading_zeros64</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of leading zero bits in x; the result is 64 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trailing_zeros</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of trailing zero bits in x; the result is UINT_SIZE for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trailing_zeros8</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of trailing zero bits in x; the result is 8 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trailing_zeros16</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u16</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of trailing zero bits in x; the result is 16 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trailing_zeros32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of trailing zero bits in x; the result is 32 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trailing_zeros64</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of trailing zero bits in x; the result is 64 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ones_count</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of one bits (&quot;population count&quot;) in x.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ones_count8</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of one bits (&quot;population count&quot;) in x.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ones_count16</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u16</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of one bits (&quot;population count&quot;) in x.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ones_count32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of one bits (&quot;population count&quot;) in x.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ones_count64</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the number of one bits (&quot;population count&quot;) in x.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rotate_left</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, k: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">uint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x rotated left by (k mod UINT_SIZE) bits. To rotate x right by k bits, call rotate_left(x, -k).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rotate_left8</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">, k: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x rotated left by (k mod 8) bits. To rotate x right by k bits, call rotate_left8(x, -k).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rotate_left16</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u16</span><span style="color:#E1E4E8;">, k: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u16</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x rotated left by (k mod 16) bits. To rotate x right by k bits, call rotate_left16(x, -k).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rotate_left32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, k: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x rotated left by (k mod 32) bits. To rotate x right by k bits, call rotate_left32(x, -k).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rotate_left64</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, k: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x rotated left by (k mod 64) bits. To rotate x right by k bits, call rotate_left64(x, -k).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">uint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bits in reversed order.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse8</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bits in reversed order.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse16</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u16</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u16</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bits in reversed order.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse32</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bits in reversed order.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse64</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bits in reversed order.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse_bytes</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">uint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bytes in reversed order.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse_bytes16</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u16</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u16</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bytes in reversed order.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse_bytes32</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bytes in reversed order.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverse_bytes64</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the value of x with its bytes in reversed order.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the minimum number of bits required to represent x; the result is 0 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len8</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the minimum number of bits required to represent x; the result is 0 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len16</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u16</span><span style="color:#E1E4E8;">): (n: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the minimum number of bits required to represent x; the result is 0 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len32</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): (n: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the minimum number of bits required to represent x; the result is 0 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len64</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): (n: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the minimum number of bits required to represent x; the result is 0 for x == 0.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, carry: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): (sum: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, carry_out: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryout output is guaranteed to be 0 or 1.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, carry: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): (sum: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, carryout: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryout output is guaranteed to be 0 or 1.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add64</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, carry: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): (sum: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, carryout: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryout output is guaranteed to be 0 or 1.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark has-diff"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sub</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, borrow: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): (diff: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, borrow_out: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the difference of x, y and borrow, diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowout output is guaranteed to be 0 or 1.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark has-diff"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sub32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, borrow: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): (diff: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, borrowout: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the difference of x, y and borrow, diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowout output is guaranteed to be 0 or 1.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark has-diff"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sub64</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, borrow: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): (diff: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, borrowout: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the difference of x, y and borrow: diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowout output is guaranteed to be 0 or 1.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mul</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): (hi: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the 64-bit product of x and y: (hi, lo) = x * y with the product bits&#39; upper half returned in hi and the lower half returned in lo.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mul32</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): (hi: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the 64-bit product of x and y: (hi, lo) = x * y with the product bits&#39; upper half returned in hi and the lower half returned in lo.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mul64</span><span style="color:#E1E4E8;">(x: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): (hi: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the 128-bit product of x and y: (hi, lo) = x * y with the product bits&#39; upper half returned in hi and the lower half returned in lo.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This function&#39;s execution time does not depend on the inputs.</p></div><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">div</span><span style="color:#E1E4E8;">(hi: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): (quo: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, rem: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the quotient and remainder of (hi, lo) divided by y:<br> quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits&#39; upper half in parameter hi and the lower half in parameter lo.<br> div panics for y == 0 (division by zero) or y &lt;= hi (quotient overflow).</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">div32</span><span style="color:#E1E4E8;">(hi: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): (quo: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, rem: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the quotient and remainder of (hi, lo) divided by y:<br> quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits&#39; upper half in parameter hi and the lower half in parameter lo.<br> div32 panics for y == 0 (division by zero) or y &lt;= hi (quotient overflow).</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">div64</span><span style="color:#E1E4E8;">(hi: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> y: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): (quo: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, rem: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the quotient and remainder of (hi, lo) divided by y:<br> quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits&#39; upper half in parameter hi and the lower half in parameter lo.<br> div64 panics for y == 0 (division by zero) or y &lt;= hi (quotient overflow).</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rem</span><span style="color:#E1E4E8;">(hi: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">uint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the remainder of (hi, lo) divided by y. rem panics for y == 0 (division by zero) but, unlike div, it doesn&#39;t panic on a quotient overflow.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rem32</span><span style="color:#E1E4E8;">(hi: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the remainder of (hi, lo) divided by y. rem32 panics for y == 0 (division by zero) but, unlike div32, it doesn&#39;t panic on a quotient overflow.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rem64</span><span style="color:#E1E4E8;">(hi: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, lo: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the remainder of (hi, lo) divided by y. rem64 panics for y == 0 (division by zero) but, unlike div64, it doesn&#39;t panic on a quotient overflow.</p>',169),p=[o];function t(r,i,c,u,d,y){return n(),a("div",null,p)}const h=s(l,[["render",t]]);export{b as __pageData,h as default};
