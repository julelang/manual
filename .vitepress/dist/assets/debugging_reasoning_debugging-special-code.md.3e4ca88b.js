import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Debugging Special Code","description":"","frontmatter":{},"headers":[],"relativePath":"debugging/reasoning/debugging-special-code.md","filePath":"debugging/reasoning/debugging-special-code.md"}'),l={name:"debugging/reasoning/debugging-special-code.md"},o=e(`<h1 id="debugging-special-code" tabindex="-1">Debugging Special Code <a class="header-anchor" href="#debugging-special-code" aria-label="Permalink to &quot;Debugging Special Code&quot;">​</a></h1><p>In some cases it may be good to have special algorithms that exist only in debug and do not affect the actual operation of the program, but disappear in production compilation. This section tells you how to get them.</p><h2 id="debugging-outputs" tabindex="-1">Debugging Outputs <a class="header-anchor" href="#debugging-outputs" aria-label="Permalink to &quot;Debugging Outputs&quot;">​</a></h2><p>Debugging outputs are calls that contain information to help you while debugging or provide some data for some reason. In fact, they are the equivalent of the built-in <code>out</code> and <code>outln</code> functions, but they are not included in the production compilation.</p><p>They are defined in the <code>std::debug</code> standard library and must be imported to be used.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> debug </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> std::debug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I am always here&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    debug::</span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I will not be here in production builds&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="debugging-special-algorithms" tabindex="-1">Debugging Special Algorithms <a class="header-anchor" href="#debugging-special-algorithms" aria-label="Permalink to &quot;Debugging Special Algorithms&quot;">​</a></h2><p>The <code>call</code> function provided by <code>std::debug</code> calls the given function immediately at no additional cost. This call is eliminated in production compilation. Using this call you can implement some of your algorithms required for debugging.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is not recommended to use algorithms that interfere with the operation of your program. Doing so will cause your program&#39;s behavior to differ between debugging and production compilation and may cause you to have more bugs.</p></div><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> debug </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> std::debug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">get_magic_number</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">get_magic_number</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    debug::</span><span style="color:#79B8FF;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Magic number is 20, and I do not like this&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(x)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,12),p=[o];function t(r,c,i,u,d,E){return n(),a("div",null,p)}const y=s(l,[["render",t]]);export{b as __pageData,y as default};
