import{_ as s,o as n,c as e,Q as a}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Objective-C","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/objective-c.md","filePath":"integrated-jule/objective-c.md"}'),l={name:"integrated-jule/objective-c.md"},p=a(`<h1 id="objective-c" tabindex="-1">Objective-C <a class="header-anchor" href="#objective-c" aria-label="Permalink to &quot;Objective-C&quot;">​</a></h1><p>Objective-C is an object-oriented programming language written on top of C. It can be preferred especially by developers in the Apple ecosystem. You can use Jule and Objective-C together.</p><h2 id="using" tabindex="-1">Using <a class="header-anchor" href="#using" aria-label="Permalink to &quot;Using&quot;">​</a></h2><p>First of all, there&#39;s something you should know, Jule does not accept Objective-C source code lineages, ie <code>.m</code> extensions, for security reasons. That&#39;s why Objective-C++ source code files should use the extension <code>.mm</code>. This is because compilers can have trouble compiling Objective-C and C++ code together.</p><p>You can create your header files with the extension <code>.h</code> in the standard way. This does not pose any compatibility issues as it is one of the standard extensions supported by Jule.</p><p>For recommended development experience, declarations should be in the header file and implementation in another source code file. In this context, let&#39;s say we have Objective-C code like this:</p><p>Our <code>cocoa.h</code>:</p><div class="language-objective-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#ifndef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">COCOA_H</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">COCOA_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetBitsPerPixel</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#endif</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// COCOA_H</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Our <code>cocoa.mm</code>:</p><div class="language-objective-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cocoa.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;Cocoa/Cocoa.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetBitsPerPixel</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NSScreen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">screen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">NSScreen</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mainScreen</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NSWindowDepth</span><span style="color:#E1E4E8;"> depth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [screen </span><span style="color:#79B8FF;">depth</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)(</span><span style="color:#B392F0;">NSBitsPerPixelFromDepth</span><span style="color:#E1E4E8;">(depth));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>We want to use above Objective-C code with Jule. The first thing we need to do is pass the <code>-framework Cocoa</code> argument to the build command using the <code>jule:pass</code> top-directive. Otherwise, we will encounter a compilation error.</p><p>Then we link the definitions we want to use by linking the relevant header file and source code. Then we are ready to use it.</p><p>For example:</p><p>Our <code>main.jule</code>:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#pass</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-framework Cocoa&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cocoa.h&quot;</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cocoa.mm&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GetBitsPerPixel</span><span style="color:#E1E4E8;">(index: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> depth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">GetBitsPerPixel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(depth)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,15),o=[p];function c(t,r,i,E,y,d){return n(),e("div",null,o)}const m=s(l,[["render",c]]);export{b as __pageData,m as default};
