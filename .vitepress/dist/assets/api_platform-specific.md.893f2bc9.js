import{_ as e,o as i,c as t,Q as o}from"./chunks/framework.7cd3ab18.js";const _=JSON.parse('{"title":"Platform Specific","description":"","frontmatter":{},"headers":[],"relativePath":"api/platform-specific.md","filePath":"api/platform-specific.md"}'),a={name:"api/platform-specific.md"},c=o('<h1 id="platform-specific" tabindex="-1">Platform Specific <a class="header-anchor" href="#platform-specific" aria-label="Permalink to &quot;Platform Specific&quot;">​</a></h1><p>If you want to do platform specific programming, the API provides a number of methods for that. Of course, macro definitions are inevitable to be presented at this point. If you include the <code>platform.hpp</code> header, it will contain several macro definitions for platform-specific programming.</p><h2 id="operating-system" tabindex="-1">Operating System <a class="header-anchor" href="#operating-system" aria-label="Permalink to &quot;Operating System&quot;">​</a></h2><p>Defines these macros by condition:</p><ul><li><code>OS_WINDOWS</code>: if platform is Windows.</li><li><code>OS_LINUX</code>: if platform is Linux.</li><li><code>OS_DARWIN</code>: if platform is Darwin.</li><li><code>OS_UNIX</code>: if platform is Linux or Darwin.</li></ul><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><p>Defines these macros by condition:</p><ul><li><code>ARCH_AMD64</code>: if architecture is AMD64.</li><li><code>ARCH_ARM</code>: if architecture is ARM.</li><li><code>ARCH_ARM64</code>: if architecture is ARM64.</li><li><code>ARCH_I386</code>: if architecture is intel 386.</li><li><code>ARCH_X64</code>: if architecture is AMD64 or ARM64.</li><li><code>ARCH_X32</code>: if architecture is ARM or intel 386.</li></ul>',8),r=[c];function l(s,f,n,d,p,m){return i(),t("div",null,r)}const u=e(a,[["render",l]]);export{_ as __pageData,u as default};
