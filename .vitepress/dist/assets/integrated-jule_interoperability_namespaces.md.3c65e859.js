import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const y=JSON.parse('{"title":"Namespaces","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/interoperability/namespaces.md","filePath":"integrated-jule/interoperability/namespaces.md"}'),p={name:"integrated-jule/interoperability/namespaces.md"},l=n(`<h1 id="namespaces" tabindex="-1">Namespaces <a class="header-anchor" href="#namespaces" aria-label="Permalink to &quot;Namespaces&quot;">​</a></h1><p>C++ definitions can sometimes be in a namespace. In this case, it is necessary to add the namespace for code generation to be correct. The <code>namespace</code> directive is used to specify the namespaces of the definitions.</p><p><strong>Supported types:</strong></p><ul><li>Variables</li><li>Functions</li><li>Structures</li></ul><h2 id="using-namespace-directive" tabindex="-1">Using <code>namespace</code> Directive <a class="header-anchor" href="#using-namespace-directive" aria-label="Permalink to &quot;Using \`namespace\` Directive&quot;">​</a></h2><p>The <code>namespace</code> directive is simple to use. It precedes the supported definition and specifies the namespace in which the definition resides.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Jule also uses the namespace you type directly in code generation, without checking if it writes the namespaces in the correct format. Adds <code>::</code> in addition to the namespace.</p></div><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo::bar&quot;</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;">(code: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> EXIT_CODE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>For the above function call, the code <code>foo::bar::exit</code> will be generated.</p><h2 id="accessing-static-defines" tabindex="-1">Accessing Static Defines <a class="header-anchor" href="#accessing-static-defines" aria-label="Permalink to &quot;Accessing Static Defines&quot;">​</a></h2><p>The <code>namespace</code> directive can be a kind of trick that can also be used to achieve static definitions.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;std::numeric_limits&lt;jule::Int&gt;&quot;</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> int_max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(int_max)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>In the example above, the <code>max</code> function actually points to the <code>jule::Int</code> (ie Jule&#39;s type <code>int</code>) instance of <code>std::numeric_limits</code>. So calls to the <code>max</code> function actually happen as <code>std::numeric_limits&lt;jule::Int&gt;::max()</code>.</p>`,15),o=[l];function t(c,i,r,d,E,m){return e(),a("div",null,o)}const b=s(p,[["render",t]]);export{y as __pageData,b as default};
