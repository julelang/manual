import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.7cd3ab18.js";const E=JSON.parse('{"title":"Macros","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/interoperability/macros.md","filePath":"integrated-jule/interoperability/macros.md"}'),l={name:"integrated-jule/interoperability/macros.md"},p=e(`<h1 id="macros" tabindex="-1">Macros <a class="header-anchor" href="#macros" aria-label="Permalink to &quot;Macros&quot;">​</a></h1><h2 id="linking-macro-defines" tabindex="-1">Linking Macro Defines <a class="header-anchor" href="#linking-macro-defines" aria-label="Permalink to &quot;Linking Macro Defines&quot;">​</a></h2><p>Macro definitions are declared just like variables. Let&#39;s assume that the tickrate variable is macro define literal.</p><p>For example:<br><strong>tickrate.hpp</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TICKRATE</span><span style="color:#E1E4E8;"> 256</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>sum.jule</strong></p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;tickrate.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> TICKRATE: </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><p>A few points:</p><ul><li>The data type must be specified when linking a variable</li><li>Cannot give expression when linking a variable</li><li>All variables linkings are immutable by default</li><li>They cannot be constant, leave immutable if linking a constant variable</li><li>Take macro definition literals as constants and leave them immutable</li></ul><h2 id="linking-macro-functions" tabindex="-1">Linking Macro Functions <a class="header-anchor" href="#linking-macro-functions" aria-label="Permalink to &quot;Linking Macro Functions&quot;">​</a></h2><p>It is possible report macros to Jule. However, type protection must be provided exactly. Function-like macros must be declared as a function.</p><p>For example:<br><strong>sum.hpp</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SUM</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">X</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">Y</span><span style="color:#E1E4E8;">) (X+Y)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>sum.jule</strong></p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sum.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">#cdef</span></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SUM</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The <code>cdef</code> attribute must be used for correct parsing of preprocessor defines.</p>`,17),o=[p];function r(t,i,c,d,u,b){return a(),n("div",null,o)}const y=s(l,[["render",r]]);export{E as __pageData,y as default};
