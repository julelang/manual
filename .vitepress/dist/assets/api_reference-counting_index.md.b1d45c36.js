import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Reference Counting","description":"","frontmatter":{},"headers":[],"relativePath":"api/reference-counting/index.md","filePath":"api/reference-counting/index.md"}'),l={name:"api/reference-counting/index.md"},o=n(`<h1 id="reference-counting" tabindex="-1">Reference Counting <a class="header-anchor" href="#reference-counting" aria-label="Permalink to &quot;Reference Counting&quot;">​</a></h1><p>Jule&#39;s reference counting functionality for allocations is provided in the API. The <code>ref.hpp</code> header contains the <code>Ptr</code> struct for reference counting.</p><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">signed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> REFERENCE_DELTA;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The reference counting data delta value that must occur per each reference counting operation.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">new_ref</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Equavelent of Jule&#39;s <code>new(T)</code> call.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">new_ref</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">init</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Equavelent of Jule&#39;s <code>new(T, EXPR)</code> call.</p><h2 id="structures" tabindex="-1">Structures <a class="header-anchor" href="#structures" aria-label="Permalink to &quot;Structures&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ptr</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Wrapper structure for raw pointer of JuleC. This structure is the used by Jule references for reference-counting and memory management.</p><h3 id="statics" tabindex="-1">Statics <a class="header-anchor" href="#statics" aria-label="Permalink to &quot;Statics&quot;">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(T </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ptr, </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Uint </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ref);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Creates new reference from allocation and reference counting allocation. Reference does not counted if reference count allocation is null.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::Ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(T </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ptr);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Creates new reference from allocation. Allocates new allocation for reference counting data and starts counting to <code>jule::REFERENCE_DELTA</code>.</p><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drop</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Drops reference. This function will destruct this instace for reference counting. Frees memory if reference counting reaches to zero.</p>`,23),p=[o];function t(r,c,i,d,E,u){return a(),e("div",null,p)}const h=s(l,[["render",t]]);export{b as __pageData,h as default};
