import{_ as e,o as t,c as o,k as a,a as s,t as l,Q as n}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"std::fmt","description":"","frontmatter":{},"headers":[],"relativePath":"std/fmt.md","filePath":"std/fmt.md"}'),r={name:"std/fmt.md"},p=n('<h1 id="std-fmt" tabindex="-1">std::fmt <a class="header-anchor" href="#std-fmt" aria-label="Permalink to &quot;std::fmt&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(fmt: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>It places the passes arguments in the string relative to the corresponding format string. The to_str function provided by the API is used for string conversion. Returns format string if <code>args.len == 0</code>. If the arguments have ended, the remaining part of format string is not processed and is returned as is.</p><p><strong>Formatting:</strong></p><p>Arguments are processed sequentially. That is, when an argument encounters a format string parameter, it will be processed according to how many parameters it is. The 5th parameter uses the 5th argument as the value.</p><p>Each format parameter is represented as <code>{}</code> in the format string. These parameters will then be deleted according to the processing algorithm and replaced with arguments.</p>',7),i=a("code",null,"{}",-1),c=n('<p><strong>Examples:</strong></p><ul><li><code>format(&quot;{} {}!&quot;, &quot;Hello&quot;, &quot;World&quot;)</code> = <code>&quot;Hello World!&quot;</code></li><li><code>format(&quot;{} {}&quot;)</code> = <code>&quot;{} {}&quot;</code></li><li><code>format(&quot;{} is the {}&quot;, &quot;PI Number&quot;)</code> = <code>&quot;PI Number is the {}&quot;</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">printf</span><span style="color:#E1E4E8;">(fmt: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Prints result of formatting to stdout. See documentation of format function for formatting.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Prints arguments by default formatting to stdout.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;">(args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Prints arguments by default formatting to stdout. Prints new-line after arguments.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fprint</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> f: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File, args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Prints arguments to file by default formatting. See documentation of format function for formatting.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fprintln</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> f: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File, args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Prints arguments to file by default formatting. Prints new-line after arguments. See documentation of format function for formatting.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> f: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File, fmt: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Prints result of formatting to file. See documentation of format function for formatting.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sprint</span><span style="color:#E1E4E8;">(args: ...</span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns string result of arguments by default formatting.</p>',23);function d(u,m,E,y,f,g){return t(),o("div",null,[p,a("p",null,[s("The parameter "),a("code",null,l(),1),s(" is formatted as "),i,s(" actually, And does not increase argument list offset.")]),c])}const F=e(r,[["render",d]]);export{b as __pageData,F as default};
