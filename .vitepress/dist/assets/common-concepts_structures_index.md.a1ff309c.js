import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Structures","description":"","frontmatter":{},"headers":[],"relativePath":"common-concepts/structures/index.md","filePath":"common-concepts/structures/index.md"}'),l={name:"common-concepts/structures/index.md"},p=e(`<h1 id="structures" tabindex="-1">Structures <a class="header-anchor" href="#structures" aria-label="Permalink to &quot;Structures&quot;">​</a></h1><p>Structures (aka structs) are a good way to collect many variables in one spot. Every declaration within the structure is called a member (aka field). The difference from a slice or aray is that contain values of the same data-type, while each of the struct fields can have a different data type. Also, the fields of structures are accessed with an identifier.</p><p>For example to declaration a struct:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Employee {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    age: </span><span style="color:#F97583;">u8</span></span>
<span class="line"><span style="color:#E1E4E8;">    title: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    salary: </span><span style="color:#F97583;">u32</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Members of structures are the same as a variable definition except <code>const</code> keyword.</p><h2 id="creating-a-instances-of-structures" tabindex="-1">Creating a Instances of Structures <a class="header-anchor" href="#creating-a-instances-of-structures" aria-label="Permalink to &quot;Creating a Instances of Structures&quot;">​</a></h2><p>To instantiate structs, you can either give the values of the fields using braces after the struct name, or create them with their default values.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Character {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    age: </span><span style="color:#F97583;">u8</span></span>
<span class="line"><span style="color:#E1E4E8;">    title: </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> anon </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Character{}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> frodo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Character{</span><span style="color:#9ECBFF;">&quot;Frodo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Hobbit&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> gandalf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Character{</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&quot;Gandalf&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        age: </span><span style="color:#79B8FF;">24000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&quot;Wizard&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(anon)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(frodo)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(gandalf)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="methods-for-structures" tabindex="-1">Methods for Structures <a class="header-anchor" href="#methods-for-structures" aria-label="Permalink to &quot;Methods for Structures&quot;">​</a></h2><p>Structures can have special functions for themselves. Similar to class methods of object oriented programming. You can use structure generics in function and have generics for your function.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You can&#39;t shadow generics.</p></div><h3 id="implementing-methods" tabindex="-1">Implementing Methods <a class="header-anchor" href="#implementing-methods" aria-label="Permalink to &quot;Implementing Methods&quot;">​</a></h3><p>To implement method(s) to structure, the following syntax is applied:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> STRUCT_IDENTIFIER {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Methods</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Just give structure identifier as receiver. Not generics or type alias.</p></div><h3 id="receiver-parameters" tabindex="-1">Receiver Parameters <a class="header-anchor" href="#receiver-parameters" aria-label="Permalink to &quot;Receiver Parameters&quot;">​</a></h3><p>Receivers indicate how instance the function will use. Receiver parameters must be the first parameter of each method. Receiver parameters are also a <a href="/memory/references.html">reference</a> by default.</p><p>There are two types of receiver parameters;</p><p><strong>Reference Receiver Parameter</strong> Reference receivers require the function to be a reference. The function can only be called from a reference instance of the structure.</p><p><strong>Receiver Parameter</strong> Receivers, on the other hand, allow changes made within the function to be reflected in the structure if receiver is mutable. However, when the structure is given as arguments to different functions, or in a different state, it is copied. That is, it is only variable within itself.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Not deep copy.</p></div><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn IDENTIFIER([RECEIVER_PARAMETER], PARAMETERS...): RET_TYPE {</span></span>
<span class="line"><span style="color:#e1e4e8;">    // Body</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>For example to receiver parameters:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// Immutable Reference Receiver</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;self</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">/* Body */</span><span style="color:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// Mutable Reference Receiver</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;self</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">/* Body */</span><span style="color:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// Immutable Receiver</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">/* Body */</span><span style="color:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// Mutable Receiver</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">/* Body */</span><span style="color:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>For example to implementing method to structure:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> Position {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_origin</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">.x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">.y </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>He example at above, implements <code>is_origin(): bool</code> method to <code>Position</code> structure.</p><h3 id="the-self-keyword" tabindex="-1">The <code>self</code> Keyword <a class="header-anchor" href="#the-self-keyword" aria-label="Permalink to &quot;The \`self\` Keyword&quot;">​</a></h3><p>The <code>self</code> keyword represents the receiver a receiver function has. It is used to access and use the members of the structure. The data type is the same as the data type of the receiver.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> Person {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">get_name</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">ret</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">.name</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>In the example above, the <code>name</code> field of the <code>Employee</code> structure instance is accessed with the <code>self</code> keyword.</p><h2 id="reference-literal-instances" tabindex="-1">Reference Literal Instances <a class="header-anchor" href="#reference-literal-instances" aria-label="Permalink to &quot;Reference Literal Instances&quot;">​</a></h2><p>You can heap-allocated structure instancing. The unary <code>&amp;</code> operator returns reference to if you use at instancing.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Position{x: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>pos</code> variable is the reference points to heap-allocated <code>Position</code> structure instance.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you not have any idea about references, check the <a href="/memory/management/">memory management documentations</a>.</p></div><h2 id="static-methods" tabindex="-1">Static Methods <a class="header-anchor" href="#static-methods" aria-label="Permalink to &quot;Static Methods&quot;">​</a></h2><p>Static methods, like normal methods, are dependent on the structure itself, but there are some differences.</p><p>These differences are:</p><ul><li>Can called via type declaration without instances</li><li>Don&#39;t dependent to instances</li><li>Don&#39;t takes receiver parameters</li><li>Can&#39;t access via instances</li></ul><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Dog {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> Dog {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">voice</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;woof woof&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Call static method via type declaration.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Dog.</span><span style="color:#79B8FF;">voice</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="static-fields" tabindex="-1">Static Fields <a class="header-anchor" href="#static-fields" aria-label="Permalink to &quot;Static Fields&quot;">​</a></h2><p>Static fields can be accessed without any instance, like static methods. All fields used statically must be constant and are implemented with the <code>impl</code> statement.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Number {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> Number {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> PI </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.14159</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> E  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.71828</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(Number.PI)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(Number.E)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,53),o=[p];function r(t,c,i,E,u,d){return a(),n("div",null,o)}const b=s(l,[["render",r]]);export{m as __pageData,b as default};
