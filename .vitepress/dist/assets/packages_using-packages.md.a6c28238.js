import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.7cd3ab18.js";const E=JSON.parse('{"title":"Using Packages","description":"","frontmatter":{},"headers":[],"relativePath":"packages/using-packages.md","filePath":"packages/using-packages.md"}'),l={name:"packages/using-packages.md"},p=e(`<h1 id="using-packages" tabindex="-1">Using Packages <a class="header-anchor" href="#using-packages" aria-label="Permalink to &quot;Using Packages&quot;">​</a></h1><p>The use declarations act as importing other packages for use in your code.<br> Declared with the <code>use</code> keyword.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>You can&#39;t use already used packages.</li><li>You must declare uses at the beginning of code.</li><li>You can&#39;t access to private (not-exported) definitions.</li></ul></div><h2 id="use-declaration-for-standard-library" tabindex="-1">Use Declaration for Standard Library <a class="header-anchor" href="#use-declaration-for-standard-library" aria-label="Permalink to &quot;Use Declaration for Standard Library&quot;">​</a></h2><p>To use standard library, standard path is used. It is quite plain and simple. You write the name of a package you want to use, if you want to use a sub-package, you separate it with a doouble colon. A reference to the standard library must begin with <code>std::</code>.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::pkg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::pkg::subpkg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="use-declaration-for-project" tabindex="-1">Use Declaration for Project <a class="header-anchor" href="#use-declaration-for-project" aria-label="Permalink to &quot;Use Declaration for Project&quot;">​</a></h2><p>Your own project may not consist of only one package, the main one. You may want to include different packages in your project. It is a useful action to use separate packages for the organization of the project. Jule recognizes subpackages in your project&#39;s main package and allows you to import those subpackages.</p><p>For example, your main package is head directory. This package is your entry package for project.</p><p>Your example project tree:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">head/</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ foo/</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ bar/</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │  ├─ README.md</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │  └─ bar.jule</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ README.md</span></span>
<span class="line"><span style="color:#e1e4e8;">│  └─ foo.jule</span></span>
<span class="line"><span style="color:#e1e4e8;">│</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ LICENSE</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ main.jule</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>As you can see in your project tree, your main package <code>head</code> directory has <code>foo</code> directory. This directory is a subpackage accessible to you and it also has a subpackage called <code>bar</code>.</p><p>Using your subpackages is simple, here is an example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> foo</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> foo::bar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>As you can see in the example above, each subpackage in your main package represents a chain of packages that you can use. This means that in your subpackages you will follow the same syntax when you try to use your other subpackages.</p><h2 id="using-use-declarations" tabindex="-1">Using Use Declarations <a class="header-anchor" href="#using-use-declarations" aria-label="Permalink to &quot;Using Use Declarations&quot;">​</a></h2><p>The definitions that come with the use declaration are accessible with the namespaces. The namespace is same with use declaration.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::pkg</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    std::pkg::</span><span style="color:#79B8FF;">a_function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="full-use-declarations" tabindex="-1">Full Use Declarations <a class="header-anchor" href="#full-use-declarations" aria-label="Permalink to &quot;Full Use Declarations&quot;">​</a></h2><p>It is sufficient to add <code>::*</code> to the end of the use declaration that you want to import fully. The definitions of packages imported in this way can be used directly or optionally accessed with the classic namespace notation.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::pkg::</span><span style="color:#F97583;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">a_function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    std::pkg::</span><span style="color:#79B8FF;">a_function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="selector-use-declarations" tabindex="-1">Selector Use Declarations <a class="header-anchor" href="#selector-use-declarations" aria-label="Permalink to &quot;Selector Use Declarations&quot;">​</a></h2><p>You can only import identifiers for the definitions you want imported. If you don&#39;t provide an identifier, nothing is imported. Imported definitions can be used directly. By default, there is no namespace representation.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::pkg::{a_function}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">a_function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="aliased-use-declarations" tabindex="-1">Aliased Use Declarations <a class="header-anchor" href="#aliased-use-declarations" aria-label="Permalink to &quot;Aliased Use Declarations&quot;">​</a></h2><p>You may need to write quite long expressions to access the packages used, you can use alias to prevent this. It is recommended that aliases be used whenever possible and should be the primary choice. Alias ​​is represented by the <code>for</code> keyword and must be unique to the use declaration.</p><p>Aliases can be combined with other uses. When you use an alias select <code>self</code> so you can also use it with the full name of package. If you will generally use the alias but want to access some definitions directly, use selection for the relevant definitions.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> math </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> std::math::{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// for accessing via full name of package</span></span>
<span class="line"><span style="color:#E1E4E8;">    pow,  </span><span style="color:#6A737D;">// direct access to pow function</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(math::</span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(std::math::</span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><hr><p>If you want to import with Namespace but want to make some definitions directly available, use the <code>self</code> keyword.</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::pkg::{</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, a_function}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">a_function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    std::pkg::</span><span style="color:#79B8FF;">a_function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You can&#39;t select same identifier with other use declarations.</p></div><h2 id="shadowing" tabindex="-1">Shadowing <a class="header-anchor" href="#shadowing" aria-label="Permalink to &quot;Shadowing&quot;">​</a></h2><p>When you import, definitions using the same identifier are shaded. When there is a conflict, the compiler will use the first imported definition. One solution might be to use the namespace notation to access shaded definitions.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::foo::</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Includes run function</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::bar::</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Includes run function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">run</span><span style="color:#E1E4E8;">()           </span><span style="color:#6A737D;">// Calls std::foo::run</span></span>
<span class="line"><span style="color:#E1E4E8;">    std::foo::</span><span style="color:#79B8FF;">run</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// Calls std::foo::run</span></span>
<span class="line"><span style="color:#E1E4E8;">    std::bar::</span><span style="color:#79B8FF;">run</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// Calls std::bar::run</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><hr><p>However, directly imported definitions can be shaded.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::foo::</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Includes pow function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// Calls pow, not std::foo:pow</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>But, any definition you explicitly import is treated as a native definition. A definition with the same identifier cannot be included in your source code in that file.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::foo::{pow}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">() {} </span><span style="color:#6A737D;">// Error: duplicated identifier</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Likewise, you cannot shade definitions that you have explicitly imported before during import.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::foo::{run}</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> std::bar::{run} </span><span style="color:#6A737D;">// Error: duplicated identifier</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="cycles" tabindex="-1">Cycles <a class="header-anchor" href="#cycles" aria-label="Permalink to &quot;Cycles&quot;">​</a></h2><p>Import cycles are dependency cycles that shouldn&#39;t be, they are dependencies that don&#39;t make sense technically. When one or more packages exhibit an infinite state of interdependence, this is indicated by a compiler message. The compiler captures and handles these cycles, allowing the developer to understand and remediate logic errors of package dependencies.</p><p>It is an illegal cycle when a package tries to import itself within itself. Logically, a package cannot be self-dependent.</p><p>This invalid dependency status is also valid if the package has dependencies on itself from different packages. For example, if one of the package&#39;s dependencies is dependent on the package itself, it&#39;s still an invalid cycle. This also applies to nested dependencies.</p>`,56),o=[p];function r(c,t,i,d,u,y){return a(),n("div",null,o)}const m=s(l,[["render",r]]);export{E as __pageData,m as default};
