import{_ as e,o as n,c as t,Q as a}from"./chunks/framework.7cd3ab18.js";const _=JSON.parse('{"title":"Functions","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/interoperability/functions.md","filePath":"integrated-jule/interoperability/functions.md"}'),s={name:"integrated-jule/interoperability/functions.md"},o=a('<h1 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h1><h2 id="linking-functions" tabindex="-1">Linking Functions <a class="header-anchor" href="#linking-functions" aria-label="Permalink to &quot;Linking Functions&quot;">​</a></h2><p>Like variable linking, after the header file containing the C++ functions is passed to Jule, C++ functions must be declared to Jule. Not all, just the ones you will use. But remember, JuleC does not check header files still.</p><p>To declare a C++ function, it must be stated that it is a C++ declaration. Then just represent the prototype of the function.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">my_function</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Linked functions can only be used within the respective package and can&#39;t overload.</p>',7),i=[o];function l(r,c,p,u,d,h){return n(),t("div",null,i)}const m=e(s,[["render",l]]);export{_ as __pageData,m as default};
