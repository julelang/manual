import{_ as e,o as t,c as s,Q as a}from"./chunks/framework.7cd3ab18.js";const _=JSON.parse('{"title":"std::testing","description":"","frontmatter":{},"headers":[],"relativePath":"std/testing.md","filePath":"std/testing.md"}'),o={name:"std/testing.md"},n=a('<h1 id="std-testing" tabindex="-1">std::testing <a class="header-anchor" href="#std-testing" aria-label="Permalink to &quot;std::testing&quot;">​</a></h1><h2 id="structures" tabindex="-1">Structures <a class="header-anchor" href="#structures" aria-label="Permalink to &quot;Structures&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>A test utility also used by the Jule runtime. It provides functionalities that facilitate the management and development of tests.</p><p><strong>Methods:</strong></p><p><code>fn fail(self)</code><br> Fails test. Does not breaks scope execution.</p><p><code>fn failed(self): bool</code><br> Reports whether test is failed.</p><p><code>fn skip(self)</code><br> Skip test. Does not breaks scope execution.</p><p><code>fn skipped(self): bool</code><br> Reports whether test is skipped.</p><p><code>fn assert(self, expr: bool): bool</code><br> Set status of test as failure if expression is evaluated false at runtime.</p><p><code>fn errorf(self, fmt: str, args: ...any)</code><br> Set status of test as failure and print message by formatting. Prints new-line after formatted text. Uses <code>std::fmt</code> internally.</p>',11),r=[n];function i(d,l,c,p,u,f){return t(),s("div",null,r)}const b=e(o,[["render",i]]);export{_ as __pageData,b as default};
