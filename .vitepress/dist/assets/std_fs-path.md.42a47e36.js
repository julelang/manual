import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"std::fs::path","description":"","frontmatter":{},"headers":[],"relativePath":"std/fs-path.md","filePath":"std/fs-path.md"}'),t={name:"std/fs-path.md"},l=n('<h1 id="std-fs-path" tabindex="-1">std::fs::path <a class="header-anchor" href="#std-fs-path" aria-label="Permalink to &quot;std::fs::path&quot;">​</a></h1><h2 id="constants" tabindex="-1">Constants <a class="header-anchor" href="#constants" aria-label="Permalink to &quot;Constants&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> SEPARATOR</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Operating system specific path separator.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> LIST_SEPARATOR</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Operating system specific path list separator.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_abs</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether the path is absolute.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_path_sep</span><span style="color:#E1E4E8;">(c: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether c is path separator.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">clean</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the shortest path name equivalent to path by purely lexical processing.<br> It applies the following rules iteratively until no further processing can be done:</p><ol><li>Replace multiple <code>SEPARATOR</code> elements with a single one.</li><li>Eliminate each <code>.</code> path name element (the current directory).</li><li>Eliminate each inner <code>..</code> path name element (the parent directory) long with the non-<code>..</code> element that precedes it.</li><li>Eliminate <code>..</code> elements that begin a rooted path: that is, replace <code>/..</code> by <code>/</code> at the beginning of a path, assuming <code>SEPARATOR</code> is <code>/</code>.</li></ol><p>The returned path ends in a slash only if it represents a root directory, such as / on Unix or C:\\ on Windows.</p><p>Finally, any occurrences of slash are replaced by <code>SEPARATOR</code>.</p><p>If the result of this process is an empty string, clean returns the string <code>..</code></p><p>On Windows, clean does not modify the volume name other than to replace occurrences of <code>/</code> with <code>\\</code>. For example, <code>clean(&quot;//host/share/../x&quot;)</code> returns <code>\\\\host\\share\\x</code>.</p><p><a href="https://9p.io/sys/doc/lexnames.html" target="_blank" rel="noreferrer">See also Rob Pike, “Lexical File Names in Plan 9 or Getting Dot-Dot Right”</a></p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">to_slash</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the result of replacing each separator character in path with a slash (<code>/</code>) character.<br> Multiple separators are replaced by multiple slashes.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">from_slash</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the result of replacing each slash (<code>/</code>) character in path with a separator character.<br> Multiple slashes are replaced by multiple separators.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">join</span><span style="color:#E1E4E8;">(elem: ...</span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Joins any number of path elements into a single path, separating them with an OS specific <code>SEPARATOR</code>. Empty elements are ignored.<br> The result is cleaned. However, if the argument list is empty or all its elements are empty, join returns an empty string.<br> On Windows, the result will only be a UNC path if the first non-empty element is a UNC path.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ext</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the file name extension used by path.<br> The extension is the suffix beginning at the final dot in the final element of path; it is empty if there is no dot.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">abs</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): (</span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">, ok: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns an absolute representation of path.<br> If the path is not absolute it will be joined with the current working directory to turn it into an absolute path. The absolute path name for a given file is not guaranteed to be unique.<br><code>abs</code> calls clean on the result.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">base</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the last element of path.<br> Trailing path separators are removed before extracting the last element.<br> If the path is empty, base returns <code>.</code>.<br> If the path consists entirely of separators, base returns a single separator.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dir</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns all but the last element of path, typically the path&#39;s directory.<br> After dropping the final element, dir calls clean on the path and trailing slashes are removed.<br> If the path is empty, dir returns <code>.</code>.<br> If the path consists entirely of separators, dir returns a single separator.<br> The returned path does not end in a separator unless it is the root directory.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">volume_name</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns leading volume name.<br> Given <code>C:\\foo\\bar</code> it returns <code>C:</code> on Windows.<br> Given <code>\\\\host\\share\\foo</code> it returns <code>\\\\host\\share</code>.<br> On other platforms it returns empty string.</p>',46),o=[l];function r(p,i,c,d,h,u){return e(),a("div",null,o)}const E=s(t,[["render",r]]);export{b as __pageData,E as default};
