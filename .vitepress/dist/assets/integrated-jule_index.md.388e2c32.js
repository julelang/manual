import{_ as e,o as t,c as i,Q as a}from"./chunks/framework.7cd3ab18.js";const f=JSON.parse('{"title":"Integrated Jule","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/index.md","filePath":"integrated-jule/index.md"}'),o={name:"integrated-jule/index.md"},n=a('<h1 id="integrated-jule" tabindex="-1">Integrated Jule <a class="header-anchor" href="#integrated-jule" aria-label="Permalink to &quot;Integrated Jule&quot;">​</a></h1><p>Integrated Jule is all the functionalities for using C/C++ and Jule codes together. You can integrate a Jule code into C++ or you can integrate C++ codes into Jule. However, the recommended and primarily supported method is the integrated use of C++ codes in Jule.</p><p>In order to achieve good compatibility with Jule, it is recommended that C++ code be integrated into a fully compatible code with Jule by utilizing the API. If you want to integrate an existing C++ code into Jule, it is recommended to develop a wrapper.</p><p>Integrated Jule is an essential part of C/C++ interoperability.</p><h2 id="library" tabindex="-1">Library <a class="header-anchor" href="#library" aria-label="Permalink to &quot;Library&quot;">​</a></h2><p>The <code>std::jule::integrated</code> standard library is a major supporter of Integrated Jule&#39;s interoperability pillar. It provides a standard for widely used C/C++ definitions. This makes it possible to spend less time on C/C++ definitions that link to Jule code. In addition, it can not only make things easier, but also improve and simplify the implementation by providing algorithms for a number of tasks.</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p>The API provides tools to develop wrappers and more. You also have the equivalents of the elementary Jule concepts in C++ code, and therefore C++ definitions are possible, allowing for fully integrated compatible bindings to using in Jule.</p><p>It can help you implement some of your algorithms in C++, taking advantage of the functionality it provides independently of Jule concepts. For example, the API itself has functions based on Jule&#39;s <code>std::unicode::utf8</code> and <code>std::unicode::utf16</code> standard libraries. These libraries can assist with UTF-16 handling and the use of Unicode with the Windows API when you write code for Windows.</p>',9),r=[n];function d(s,l,c,u,p,h){return t(),i("div",null,r)}const g=e(o,[["render",d]]);export{f as __pageData,g as default};
