import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Maps","description":"","frontmatter":{},"headers":[],"relativePath":"common-concepts/maps.md","filePath":"common-concepts/maps.md"}'),l={name:"common-concepts/maps.md"},p=n(`<h1 id="maps" tabindex="-1">Maps <a class="header-anchor" href="#maps" aria-label="Permalink to &quot;Maps&quot;">​</a></h1><p>Maps is a hashmap. Maps a unique key value to a value.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Map values ​​are not kept in the inserted order. Hence iterations etc. It&#39;s very likely that you don&#39;t get a sequential output in actions.</p></div><p>Example to maps:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> mymap: [</span><span style="color:#F97583;">i8</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;CPU&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;RAM&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;GPU&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(mymap)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The example above shows how a map is defined and its data-type representation. To describe a map, curly braces are opened after the data type. Each key-value pair is separated by a comma. Keys and values are separated by colons, the key comes first, then the value.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In iterations, the first variable is the key and the second variable is the value.</p></div><h2 id="access-to-elements-and-indexing" tabindex="-1">Access to Elements and Indexing <a class="header-anchor" href="#access-to-elements-and-indexing" aria-label="Permalink to &quot;Access to Elements and Indexing&quot;">​</a></h2><p>To get the value of a key, it is sufficient to index it with the key.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">mymap[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The example at above, gives <code>&quot;RAM&quot;</code> value.<br> If you try to access a key that does not exist, it will return the default value.</p><hr><p>To change the value of a key, it is sufficient to do a classic assignment by indexing the key.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">mymap[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;SSD&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>To add a key-value pair that doesn&#39;t exist, it&#39;s still just a classic assignment.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">mymap[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;HDD&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If the key does not exist when you assign it, the key is generated and matched with the value you assigned.</p>`,20),o=[p];function t(c,r,i,d,u,E){return a(),e("div",null,o)}const h=s(l,[["render",t]]);export{m as __pageData,h as default};
