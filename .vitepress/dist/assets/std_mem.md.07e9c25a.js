import{_ as e,o as s,c as n,Q as a}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"std::mem","description":"","frontmatter":{},"headers":[],"relativePath":"std/mem.md","filePath":"std/mem.md"}'),t={name:"std/mem.md"},o=a('<h1 id="std-mem" tabindex="-1">std::mem <a class="header-anchor" href="#std-mem" aria-label="Permalink to &quot;std::mem&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">size_of</span><span style="color:#E1E4E8;">(TYPE </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> EXPRESSION): </span><span style="color:#F97583;">uint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the size of the type in bytes. If given expression, uses type of expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">align_of</span><span style="color:#E1E4E8;">(TYPE </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> EXPRESSION): </span><span style="color:#F97583;">uint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the alignment, in bytes, required for any instance of the type indicated by type-id, which is either complete object type. If given expression, uses type of expression.</p><h2 id="structures" tabindex="-1">Structures <a class="header-anchor" href="#structures" aria-label="Permalink to &quot;Structures&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Heap[T]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Wrapper for heap allocation. Should be freed, occurs memory leak if did not.</p><p><strong>Methods:</strong></p><p><code>static fn new(): &amp;Heap[T]</code><br> Allocates new <code>T</code> on heap, and returns <code>&amp;Heap[T]</code> instance that points relevant allocation. Returns nil reference if allocation failed.</p><hr><p><code>fn addr(self): uintptr</code><br> Returns address of allocation. Returns 0 if internal pointer is nil.</p><hr><p><code>fn free(mut self)</code><br> Frees allocation and sets address as 0 (aka nil).</p><hr><p><code>fn get(mut self): T</code><br> Dereferences and returns value of internal pointer. Panics if internal pointer is nil.</p><hr><p><code>fn set(mut self, mut val: T)</code><br> Sets value of internal pointer. Panics if internal pointer is nil.</p>',20),r=[o];function l(i,p,c,d,u,m){return s(),n("div",null,r)}const b=e(t,[["render",l]]);export{h as __pageData,b as default};
