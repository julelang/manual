import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Panics","description":"","frontmatter":{},"headers":[],"relativePath":"error-handling/panics.md","filePath":"error-handling/panics.md"}'),e={name:"error-handling/panics.md"},p=l(`<h1 id="panics" tabindex="-1">Panics <a class="header-anchor" href="#panics" aria-label="Permalink to &quot;Panics&quot;">â€‹</a></h1><p>Panics abruptly stop program execution and &quot;abort&quot; it. If you&#39;re talking about an issue that will cause the program to crash while executing, using panic would be a good choice. The panic function is the builtin function. See the <a href="/std/builtin.html">builtin documentations</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Panics are not recoverable.</p></div><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add_to_ref</span><span style="color:#E1E4E8;">(rate: </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> i: </span><span style="color:#F97583;">&amp;int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;i is nil reference&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> rate</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">add_to_ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>The code above is an example of panicking.</p>`,6),o=[p];function t(c,r,i,E,u,y){return n(),a("div",null,o)}const m=s(e,[["render",t]]);export{b as __pageData,m as default};
