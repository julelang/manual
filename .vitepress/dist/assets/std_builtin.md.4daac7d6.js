import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"builtin","description":"","frontmatter":{},"headers":[],"relativePath":"std/builtin.md","filePath":"std/builtin.md"}'),l={name:"std/builtin.md"},t=n('<h1 id="builtin" tabindex="-1">builtin <a class="header-anchor" href="#builtin" aria-label="Permalink to &quot;builtin&quot;">​</a></h1><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><h3 id="type-byte-u8" tabindex="-1"><code>type byte: u8</code> <a class="header-anchor" href="#type-byte-u8" aria-label="Permalink to &quot;`type byte: u8`&quot;">​</a></h3><p>Is an alias for u8. It is used, by convention, to distinguish byte values from 8-bit unsigned integer values.</p><hr><h3 id="type-rune-i32" tabindex="-1"><code>type rune: i32</code> <a class="header-anchor" href="#type-rune-i32" aria-label="Permalink to &quot;`type rune: i32`&quot;">​</a></h3><p>Is an alias for i32. It is used, by convention, to distinguish character values from integer values.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">out</span><span style="color:#E1E4E8;">(v)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Prints value to command line. Uses built-in formatter.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(v)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This function same with the <code>out</code> function. One difference, prints new line after print.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(message: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Panics program with given error message. This panics are not recoverable.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">assert</span><span style="color:#E1E4E8;">(expr: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Call panic function if expression is evaluated false at runtime.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(T): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns new reference-type for T initialized with default.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(T, expr: T): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns new reference-type for T initialized with expression.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(T, ...V): T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns new instance of data type for supported types.</p><ul><li>Slices:<br> Allocates slices dynamically. In addition to the slice type, it can take two more arguments. The first argument is mandatory. The first argument specifies the length of the slice. The second argument specifies the capacity of the slice and is optional. The slice is returned with its length, and the field within its length is initialized with the default value.</li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">copy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> dest: []T, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> src: []T): </span><span style="color:#F97583;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Copies elements of source to destination slice.<br> Returns number of copied elements.<br> Source can be any data type that supported by destination type.</p><p>Special cases are:</p><ul><li><code>copy(dest, src) = length accepts as src.len if dest.len &gt; src.len</code></li><li><code>copy(dest, src) = length accepts as dest.len if src.len &gt; dest.len</code></li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> src: []T, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> items: ...T): []T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If there is enough capacity, it adds to the target slice. If there is not enough capacity, it creates a copy of the target slice with enough capacity and adds the new elements and returns the new allocation.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">clone</span><span style="color:#E1E4E8;">(expr: T): T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns mutable deep-clone of expression.</p><p>Allowed types:</p><ul><li><code>[]T</code></li><li><code>[...]T</code></li><li><code>[K:V]</code></li><li><code>&amp;T</code></li><li><code>*T:</code></li><li><code>jule:derive Clone</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="/memory/immutability.html#cloning">See more cloning information.</a></p></div><h2 id="traits" tabindex="-1">Traits <a class="header-anchor" href="#traits" aria-label="Permalink to &quot;Traits&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Dispose {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dispose</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Implements destructor method.</p>',46),p=[t];function o(i,r,c,d,u,y){return e(),a("div",null,p)}const E=s(l,[["render",o]]);export{h as __pageData,E as default};
