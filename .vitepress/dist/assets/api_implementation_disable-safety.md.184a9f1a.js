import{_ as e,o as a,c as s,Q as n}from"./chunks/framework.7cd3ab18.js";const u=JSON.parse('{"title":"Disable Safety","description":"","frontmatter":{},"headers":[],"relativePath":"api/implementation/disable-safety.md","filePath":"api/implementation/disable-safety.md"}'),t={name:"api/implementation/disable-safety.md"},i=n(`<h1 id="disable-safety" tabindex="-1">Disable Safety <a class="header-anchor" href="#disable-safety" aria-label="Permalink to &quot;Disable Safety&quot;">â€‹</a></h1><p>You may not implement some safety algorithms of the API. There is a preprocessor define for manipulating an implementation for this. API not implements related safety measures if this preprocessor define is defined.</p><p><strong>Disables:</strong></p><ul><li>Null pointer checking</li><li>Boundary checking for array, slice, or any contiguous memory structure</li><li>Type compatibility checking for casting <code>any</code> type, traits or etc.</li><li>Catching divide-by-zero undefined behavior for relevant math functions</li></ul><p>To do this, define the <code>__JULE_DISABLE__SAFETY</code> macro before include relevant headers.</p><p>For example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_DISABLE__SAFETY</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;api/jule.hpp&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,7),o=[i];function l(r,p,c,d,m,_){return a(),s("div",null,o)}const h=e(t,[["render",l]]);export{u as __pageData,h as default};
