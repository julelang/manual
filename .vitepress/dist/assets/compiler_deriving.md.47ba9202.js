import{_ as e,o as s,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Deriving","description":"","frontmatter":{},"headers":[],"relativePath":"compiler/deriving.md","filePath":"compiler/deriving.md"}'),t={name:"compiler/deriving.md"},o=n(`<h1 id="deriving" tabindex="-1">Deriving <a class="header-anchor" href="#deriving" aria-label="Permalink to &quot;Deriving&quot;">​</a></h1><p>Deriving is a set of behaviors or extensions that the compiler must implement for types. These are implemented by the compiler, the developer should only request them to be implemented.</p><h2 id="derive-clone" tabindex="-1">Derive: <code>Clone</code> <a class="header-anchor" href="#derive-clone" aria-label="Permalink to &quot;Derive: \`Clone\`&quot;">​</a></h2><p><code>Clone</code> adds support to structs for the built-in <code>clone</code> function. The compiler adds an algorithm that can deep copy every field of the structure at runtime.</p><p><br> For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">#derive</span><span style="color:#E1E4E8;"> Clone</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> SliceWrapper {</span></span>
<span class="line"><span style="color:#E1E4E8;">    buffer: []</span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This may not always be possible. If the structure defines fields with a data type that does not support deep copy, the <code>Clone</code> derive will fail.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>See more information about <a href="/memory/mutability.html#cloning">cloning supported types</a>.</p></div>`,8),i=[o];function r(l,p,c,d,m,u){return s(),a("div",null,i)}const v=e(t,[["render",r]]);export{b as __pageData,v as default};
