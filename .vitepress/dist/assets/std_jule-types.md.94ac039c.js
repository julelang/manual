import{_ as e,o as s,c as a,Q as i}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"std::jule::types","description":"","frontmatter":{},"headers":[],"relativePath":"std/jule-types.md","filePath":"std/jule-types.md"}'),n={name:"std/jule-types.md"},t=i('<h1 id="std-jule-types" tabindex="-1">std::jule::types <a class="header-anchor" href="#std-jule-types" aria-label="Permalink to &quot;std::jule::types&quot;">​</a></h1><h2 id="globals" tabindex="-1">Globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;Globals&quot;">​</a></h2><h3 id="const-bit-size-int" tabindex="-1"><code>const BIT_SIZE: int</code> <a class="header-anchor" href="#const-bit-size-int" aria-label="Permalink to &quot;`const BIT_SIZE: int`&quot;">​</a></h3><p>Bit-size of runtime architecture.<br> Possible values are: 32, and 64.</p><hr><h3 id="const-sys-int-str" tabindex="-1"><code>const SYS_INT: str</code> <a class="header-anchor" href="#const-sys-int-str" aria-label="Permalink to &quot;`const SYS_INT: str`&quot;">​</a></h3><p>Signed integer kind of runtime architecture.<br> Is equavalent to <code>int</code>, but specific bit-sized integer kind.</p><hr><h3 id="const-sys-uint-str" tabindex="-1"><code>const SYS_UINT: str</code> <a class="header-anchor" href="#const-sys-uint-str" aria-label="Permalink to &quot;`const SYS_UINT: str`&quot;">​</a></h3><p>Unsigned integer kind of runtime architecture.<br> Is equavalent to <code>uint</code> and <code>uintptr</code>, but specific bit-sized integer kind.</p><hr><h3 id="max-f32" tabindex="-1"><code>MAX_F32</code> <a class="header-anchor" href="#max-f32" aria-label="Permalink to &quot;`MAX_F32`&quot;">​</a></h3><p>Maximum positive value of 32-bit floating-points.</p><hr><h3 id="min-f32" tabindex="-1"><code>MIN_F32</code> <a class="header-anchor" href="#min-f32" aria-label="Permalink to &quot;`MIN_F32`&quot;">​</a></h3><p>Maximum negative value of 32-bit floating-points.</p><hr><h3 id="max-f64" tabindex="-1"><code>MAX_F64</code> <a class="header-anchor" href="#max-f64" aria-label="Permalink to &quot;`MAX_F64`&quot;">​</a></h3><p>Maximum positive value of 64-bit floating-points.</p><hr><h3 id="min-f64" tabindex="-1"><code>MIN_F64</code> <a class="header-anchor" href="#min-f64" aria-label="Permalink to &quot;`MIN_F64`&quot;">​</a></h3><p>Maximum negative value of 64-bit floating-points.</p><hr><h3 id="max-i8" tabindex="-1"><code>MAX_I8</code> <a class="header-anchor" href="#max-i8" aria-label="Permalink to &quot;`MAX_I8`&quot;">​</a></h3><p>Maximum positive value of 8-bit signed integers.</p><hr><h3 id="min-i8" tabindex="-1"><code>MIN_I8</code> <a class="header-anchor" href="#min-i8" aria-label="Permalink to &quot;`MIN_I8`&quot;">​</a></h3><p>Maximum negative value of 8-bit signed integers.</p><hr><h3 id="max-i16" tabindex="-1"><code>MAX_I16</code> <a class="header-anchor" href="#max-i16" aria-label="Permalink to &quot;`MAX_I16`&quot;">​</a></h3><p>Maximum positive value of 16-bit signed integers.</p><hr><h3 id="min-i16" tabindex="-1"><code>MIN_I16</code> <a class="header-anchor" href="#min-i16" aria-label="Permalink to &quot;`MIN_I16`&quot;">​</a></h3><p>Maximum negative value of 16-bit signed integers.</p><hr><h3 id="max-i32" tabindex="-1"><code>MAX_I32</code> <a class="header-anchor" href="#max-i32" aria-label="Permalink to &quot;`MAX_I32`&quot;">​</a></h3><p>Maximum positive value of 32-bit signed integers.</p><hr><h3 id="min-i32" tabindex="-1"><code>MIN_I32</code> <a class="header-anchor" href="#min-i32" aria-label="Permalink to &quot;`MIN_I32`&quot;">​</a></h3><p>Maximum negative value of 32-bit signed integers.</p><hr><h3 id="max-i64" tabindex="-1"><code>MAX_I64</code> <a class="header-anchor" href="#max-i64" aria-label="Permalink to &quot;`MAX_I64`&quot;">​</a></h3><p>Maximum positive value of 64-bit signed integers.</p><hr><h3 id="min-i64" tabindex="-1"><code>MIN_I64</code> <a class="header-anchor" href="#min-i64" aria-label="Permalink to &quot;`MIN_I64`&quot;">​</a></h3><p>Maximum negative value of 64-bit signed integers.</p><hr><h3 id="max-u8" tabindex="-1"><code>MAX_U8</code> <a class="header-anchor" href="#max-u8" aria-label="Permalink to &quot;`MAX_U8`&quot;">​</a></h3><p>Maximum value of 8-bit unsigned integers.</p><hr><h3 id="max-u16" tabindex="-1"><code>MAX_U16</code> <a class="header-anchor" href="#max-u16" aria-label="Permalink to &quot;`MAX_U16`&quot;">​</a></h3><p>Maximum value of 16-bit unsigned integers.</p><hr><h3 id="max-u32" tabindex="-1"><code>MAX_U32</code> <a class="header-anchor" href="#max-u32" aria-label="Permalink to &quot;`MAX_U32`&quot;">​</a></h3><p>Maximum value of 32-bit unsigned integers.</p><hr><h3 id="max-u64" tabindex="-1"><code>MAX_U64</code> <a class="header-anchor" href="#max-u64" aria-label="Permalink to &quot;`MAX_U64`&quot;">​</a></h3><p>Maximum value of 64-bit unsigned integers.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn real_kind_of(kind: str): str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns kind&#39;s bit-specific kind if bit-specific like int, uint, and uintptr.<br> Returns kind if not bit-specific.<br> Bit-size is determined by runtime.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn bitsize_of(k: str): int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns kind&#39;s bit-size.<br> Returns -1 if kind is not numeric.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn int_from_bits(bits: u64): str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns signed integer kind by bit-size.<br> Possible bit-sizes are: 8, 16, 32, and 64.<br> Returns empty string if bits is invalid.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn uint_from_bits(bits: u64): str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns unsigned integer kind by bit-size.<br> Possible bit-sizes are: 8, 16, 32, and 64.<br> Returns empty string if bits is invalid.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn float_from_bits(bits: u64): str</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns floating-point kind by bit-size.<br> Possible bit-sizes are: 32, and 64.<br> Returns empty string if bits is invalid.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn check_bit_int(v: str, bit: int): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether signed integer literal is compatible given bit-size.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn check_bit_uint(v: str, bit: int): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether unsigned integer literal is compatible given bit-size.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn check_bit_float(val: str, bit: int): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether float literal is compatible given bit-size.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn bitsize_of_float(x: f64): u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports minimum bit-size of given floating-point.</p><p>Possible values are:</p><ul><li>32 for 32-bit</li><li>64 for 64-bit</li></ul><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn bitsize_of_int(x: i64): u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports minimum bit-size of given signed integer.</p><p>Possible values are:</p><ul><li>8 for 8-bit</li><li>16 for 16-bit</li><li>32 for 32-bit</li><li>64 for 64-bit</li></ul><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn bitsize_of_uint(x: u64): u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports minimum bit-size of given unsigned integer.</p><p>Possible values are:</p><ul><li>8 for 8-bit</li><li>16 for 16-bit</li><li>32 for 32-bit</li><li>64 for 64-bit</li></ul><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn min_of(mut k: str): f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns minimum value of signed/unsigned integer and floating-point kinds.<br> Returns 0 if kind is invalid.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn max_of(mut k: str): f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns minimum value of signed/unsigned integer and floating-point kinds.<br> Returns 0 if kind is invalid.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_sig_int(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is signed integer.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_unsig_int(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports kind is unsigned integer.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_int(k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is signed/unsigned integer.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_float(k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is float.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_num(k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is numeric.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_sig_num(k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is signed numeric.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_i8_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether i8 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_i16_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether i16 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_i32_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether i32 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_i64_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether i64 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u8_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u8 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u16_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u16 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u32_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u32 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u64_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u64 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_f32_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether f32 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_f64_compatible(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether f64 is compatible with kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn types_are_compatible(mut k1: str, k2: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports types are compatible.<br> k1 is the destination type, k2 is the source type.<br> Return false if k2 is unsupported kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_i16_greater(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether i16 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_i32_greater(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether i32 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_i64_greater(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether i64 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u8_greater(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u8 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u16_greater(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u16 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u32_greater(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u32 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_u64_greater(mut k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether u64 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_f32_greater(k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether f32 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_f64_greater(k: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether f64 is greater than given kind.</p><hr><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">fn is_greater(mut k1: str, k2: str): bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether k1 kind greater than k2 kind.</p><h2 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h2><p><code>enum TypeKind: str</code></p><p>Type kinds of primitive types. These kinds are must match keyword form itself.</p><p><strong>Fields:</strong></p><ul><li><code>I8</code>: Kind of signed 8-bit integer</li><li><code>I16</code>: Kind of signed 16-bit integer</li><li><code>I32</code>: Kind of signed 32-bit integer</li><li><code>I64</code>: Kind of signed 64-bit integer</li><li><code>U8</code>: Kind of unsigned 8-bit integer</li><li><code>U16</code>: Kind of unsigned 16-bit integer</li><li><code>U32</code>: Kind of unsigned 32-bit integer</li><li><code>U64</code>: Kind of unsigned 64-bit integer</li><li><code>F32</code>: Kind of 32-bit floating-point</li><li><code>F64</code>: Kind of 64-bit floating-point</li><li><code>Uint</code>: Kind of system specific bit-size unsigned integer</li><li><code>Int</code>: Kind of system specific bit-size signed integer</li><li><code>Uintptr</code>: Kind of system specific bit-size unsigned integer</li><li><code>Bool</code>: Kind of boolean</li><li><code>Str</code>: Kind of string</li><li><code>Any</code>: Kind of any type</li></ul>',189),r=[t];function l(o,p,d,c,u,b){return s(),a("div",null,r)}const g=e(n,[["render",l]]);export{m as __pageData,g as default};
