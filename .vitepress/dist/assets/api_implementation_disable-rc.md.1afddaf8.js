import{_ as e,o as n,c as a,Q as s}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"Disable RC (Reference Counting)","description":"","frontmatter":{},"headers":[],"relativePath":"api/implementation/disable-rc.md","filePath":"api/implementation/disable-rc.md"}'),t={name:"api/implementation/disable-rc.md"},o=s(`<h1 id="disable-rc-reference-counting" tabindex="-1">Disable RC (Reference Counting) <a class="header-anchor" href="#disable-rc-reference-counting" aria-label="Permalink to &quot;Disable RC (Reference Counting)&quot;">â€‹</a></h1><p>You can disable parts of the API that implement reference counting. This does not removes all reference counting functionality of the API. So the definitions used for reference counting and the like remain. But definitions that exhibit reference counting and the reference counting mechanism itself stop counting and do not automatically free memory allocations. This can cause your program to have high memory consumption and memory leaks.</p><p>To do this, define the <code>__JULE_DISABLE__REFERENCE_COUNTING</code> macro before include relevant headers.</p><p>For example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_DISABLE__REFERENCE_COUNTING</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;api/jule.hpp&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,5),i=[o];function r(c,l,p,d,u,m){return n(),a("div",null,i)}const f=e(t,[["render",r]]);export{h as __pageData,f as default};
