import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const E=JSON.parse('{"title":"std::encoding::base64","description":"","frontmatter":{},"headers":[],"relativePath":"std/encoding-base64.md","filePath":"std/encoding-base64.md"}'),l={name:"std/encoding-base64.md"},o=n('<h1 id="std-encoding-base64" tabindex="-1">std::encoding::base64 <a class="header-anchor" href="#std-encoding-base64" aria-label="Permalink to &quot;std::encoding::base64&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">encode</span><span style="color:#E1E4E8;">(src: []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, pad: </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">): []</span><span style="color:#F97583;">byte</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Encodes source bytes with standard base64 table. Returns encoded base64 bytes if success, nil slice if not. Adds padding if pad is true.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">decode</span><span style="color:#E1E4E8;">(src: []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): []</span><span style="color:#F97583;">byte</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Decodes source bytes with standard base64 table. Returns decoded bytes if success, nil slice if not. Detects padding by default, no required padding specification.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">encode_url</span><span style="color:#E1E4E8;">(src: []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): []</span><span style="color:#F97583;">byte</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Encodes source bytes with url base64 table. It is typically used for URLs and file names. Returns encoded base64 bytes if success, nil slice if not.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">decode_url</span><span style="color:#E1E4E8;">(src: []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): []</span><span style="color:#F97583;">byte</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Decodes source bytes with url base64 table. It is typically used for URLs and file names. Returns decoded bytes if success, nil slice if not.</p>',13),t=[o];function c(p,r,i,d,u,b){return e(),a("div",null,t)}const h=s(l,[["render",c]]);export{E as __pageData,h as default};
