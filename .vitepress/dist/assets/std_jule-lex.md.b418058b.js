import{_ as s,o as e,c as l,Q as n}from"./chunks/framework.7cd3ab18.js";const y=JSON.parse('{"title":"std::jule:lex","description":"","frontmatter":{},"headers":[],"relativePath":"std/jule-lex.md","filePath":"std/jule-lex.md"}'),a={name:"std/jule-lex.md"},o=n('<h1 id="std-jule-lex" tabindex="-1">std::jule:lex <a class="header-anchor" href="#std-jule-lex" aria-label="Permalink to &quot;std::jule:lex&quot;">​</a></h1><h2 id="globals" tabindex="-1">Globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;Globals&quot;">​</a></h2><h3 id="static-puncts-rune" tabindex="-1"><code>static PUNCTS: [...]rune</code> <a class="header-anchor" href="#static-puncts-rune" aria-label="Permalink to &quot;`static PUNCTS: [...]rune`&quot;">​</a></h3><p>Punctuations.</p><hr><h3 id="static-spaces-rune" tabindex="-1"><code>static SPACES: [...]rune</code> <a class="header-anchor" href="#static-spaces-rune" aria-label="Permalink to &quot;`static SPACES: [...]rune`&quot;">​</a></h3><p>Space characters.</p><hr><h3 id="static-unary-ops-tokenkind" tabindex="-1"><code>static UNARY_OPS: [...]TokenKind</code> <a class="header-anchor" href="#static-unary-ops-tokenkind" aria-label="Permalink to &quot;`static UNARY_OPS: [...]TokenKind`&quot;">​</a></h3><p>Kind list of unary operators.</p><hr><h3 id="static-bin-ops-tokenkind" tabindex="-1"><code>static BIN_OPS: [...]TokenKind</code> <a class="header-anchor" href="#static-bin-ops-tokenkind" aria-label="Permalink to &quot;`static BIN_OPS: [...]TokenKind`&quot;">​</a></h3><p>Kind list of binary operators.</p><hr><h3 id="static-weak-ops-tokenkind" tabindex="-1"><code>static WEAK_OPS: [...]TokenKind</code> <a class="header-anchor" href="#static-weak-ops-tokenkind" aria-label="Permalink to &quot;`static WEAK_OPS: [...]TokenKind`&quot;">​</a></h3><p>Kind list of weak operators.<br> These operators are weak, can used as part of expression.</p><hr><h3 id="static-postfix-ops-tokenkind" tabindex="-1"><code>static POSTFIX_OPS: [...]TokenKind</code> <a class="header-anchor" href="#static-postfix-ops-tokenkind" aria-label="Permalink to &quot;`static POSTFIX_OPS: [...]TokenKind`&quot;">​</a></h3><p>List of postfix operators.</p><hr><h3 id="static-assign-ops-tokenkind" tabindex="-1"><code>static ASSIGN_OPS: [...]TokenKind</code> <a class="header-anchor" href="#static-assign-ops-tokenkind" aria-label="Permalink to &quot;`static ASSIGN_OPS: [...]TokenKind`&quot;">​</a></h3><p>List of assign operators.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> f: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File, text: []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Lex source code into fileset.<br> Returns nil if <code>f == nil</code>.<br> Returns nil slice for errors if no any error.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new_file_set</span><span style="color:#E1E4E8;">(path: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns new File points to Jule file.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_unary_op</span><span style="color:#E1E4E8;">(kind: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is unary operator.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_bin_op</span><span style="color:#E1E4E8;">(kind: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is binary operator.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_weak_op</span><span style="color:#E1E4E8;">(kind: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is weak operator.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_str</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is string literal.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_raw_str</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is raw string literal.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_rune</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is rune literal. Literal value can be byte or rune.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_nil</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is nil literal.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_bool</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is boolean literal.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_float</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is float.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_num</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is numeric.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_lit</span><span style="color:#E1E4E8;">(k: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether kind is literal.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_ignore_ident</span><span style="color:#E1E4E8;">(ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether identifier is ignore.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_anon_ident</span><span style="color:#E1E4E8;">(ident: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether identifier is anonymous.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_punct</span><span style="color:#E1E4E8;">(r: </span><span style="color:#F97583;">rune</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether rune is punctuation.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_space</span><span style="color:#E1E4E8;">(r: </span><span style="color:#F97583;">rune</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports wheter byte is whitespace.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_letter</span><span style="color:#E1E4E8;">(r: </span><span style="color:#F97583;">rune</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether rune is letter.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_ident_rune</span><span style="color:#E1E4E8;">(s: </span><span style="color:#F97583;">str</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether firs rune of string is allowed to first rune for identifier.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_decimal</span><span style="color:#E1E4E8;">(b: </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether byte is decimal sequence.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_binary</span><span style="color:#E1E4E8;">(b: </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether byte is binary sequence.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_octal</span><span style="color:#E1E4E8;">(b: </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether byte is octal sequence.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">is_hex</span><span style="color:#E1E4E8;">(b: </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">bool</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Reports whether byte is hexadecimal sequence.</p><h2 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> File {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data: []</span><span style="color:#F97583;">byte</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Fileset for lexing.</p><p><strong>Methods:</strong></p><p><code>fn is_ok(self): bool</code><br> Reports whether file path is exist and accessible.</p><p><code>fn path(self): str</code><br> Returns path.</p><p><code>fn dir(self): str</code><br> Returns directory of file&#39;s path.</p><p><code>fn name(self): str</code><br> Returns filename.</p><p><code>fn addr(self): uintptr</code><br> Returns self as uintptr.</p><p><code>fn tokens(mut self): []Token</code><br> Returns tokens of file.<br> Tokens are mutable.</p><p><code>fn fill(mut self, mut data: []byte)</code><br> Fill data.</p><p><code>fn get_row(self, row: int): str</code><br> Return line (not include new-line char) by row. <br> Returns empty string if line is not exist in buffer.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Token {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    file:   </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">File</span></span>\n<span class="line"><span style="color:#E1E4E8;">    row:    </span><span style="color:#F97583;">int</span></span>\n<span class="line"><span style="color:#E1E4E8;">    column: </span><span style="color:#F97583;">int</span></span>\n<span class="line"><span style="color:#E1E4E8;">    kind:   </span><span style="color:#F97583;">str</span></span>\n<span class="line"><span style="color:#E1E4E8;">    id:     TokenId</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Token is lexer token.</p><p><strong>Methods:</strong></p><p><code>fn prec(self): byte</code><br> Returns operator precedence of token.<br> Returns <code>0</code> if token is not operator or<br> invalid operator for operator precedence.</p><p>Accepts assignment tokens (like equals [=]) as precedenced operator to handle expression assignments.</p><p><code>fn path(self): str</code><br> Returns path.</p><p><code>fn dir(self): str</code><br> Returns directory of file&#39;s path.</p><p><code>fn name(self): str</code><br> Returns filename.</p><p><code>fn addr(self): uintptr</code><br> Returns self as uintptr.</p><p><code>fn tokens(mut self): []Token</code><br> Returns tokens of file.<br> Tokens are mutable.</p><h2 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h2><p><code>enum Idenet: str</code></p><p>Special identifiers.</p><p><strong>Fields:</strong></p><ul><li>Ignore: Ignore</li><li>Anon: Anonymous</li></ul><hr><p><code>enum TokenId: uint</code></p><p>Token identities.</p><p><strong>Fields:</strong></p><ul><li><code>Na</code></li><li><code>Prim</code></li><li><code>Ident</code></li><li><code>Range</code></li><li><code>Ret</code></li><li><code>Semicolon</code></li><li><code>Lit</code></li><li><code>Op</code></li><li><code>Comma</code></li><li><code>Const</code></li><li><code>Type</code></li><li><code>Colon</code></li><li><code>For</code></li><li><code>Break</code></li><li><code>Cont</code></li><li><code>In</code></li><li><code>If</code></li><li><code>Else</code></li><li><code>Comment</code></li><li><code>Use</code></li><li><code>Dot</code></li><li><code>Pub</code></li><li><code>Goto</code></li><li><code>DblColon</code></li><li><code>Enum</code></li><li><code>Struct</code></li><li><code>Co</code></li><li><code>Match</code></li><li><code>Self</code></li><li><code>Trait</code></li><li><code>Impl</code></li><li><code>Cpp</code></li><li><code>Fall</code></li><li><code>Fn</code></li><li><code>Let</code></li><li><code>Unsafe</code></li><li><code>Mut</code></li><li><code>Defer</code></li><li><code>Static</code></li><li><code>Error</code></li></ul><hr><p><code>enum TokenKind: str</code></p><p>Token kinds.</p><p><strong>Fields:</strong></p><ul><li><code>DblColon</code></li><li><code>Colon</code></li><li><code>Semicolon</code></li><li><code>Comma</code></li><li><code>TripleDot</code></li><li><code>Dot</code></li><li><code>PlusEq</code></li><li><code>MinusEq</code></li><li><code>StarEq</code></li><li><code>SolidusEq</code></li><li><code>PercentEq</code></li><li><code>LshiftEq</code></li><li><code>RshiftEq</code></li><li><code>CaretEq</code></li><li><code>AmperEq</code></li><li><code>VlineEq</code></li><li><code>Eqs</code></li><li><code>NotEq</code></li><li><code>GreatEq</code></li><li><code>LessEq</code></li><li><code>DblAmper</code></li><li><code>DblVline</code></li><li><code>Lshift</code></li><li><code>Rshift</code></li><li><code>DblPlus</code></li><li><code>DblMinus</code></li><li><code>Plus</code></li><li><code>Minus</code></li><li><code>Star</code></li><li><code>Solidus</code></li><li><code>Percent</code></li><li><code>Amper</code></li><li><code>Vline</code></li><li><code>Caret</code></li><li><code>Excl</code></li><li><code>Lt</code></li><li><code>Gt</code></li><li><code>Eq</code></li><li><code>LnComment</code></li><li><code>RangLComment</code></li><li><code>RangRComment</code></li><li><code>LParent</code></li><li><code>RParent</code></li><li><code>LBracket</code></li><li><code>RBracket</code></li><li><code>LBrace</code></li><li><code>RBrace</code></li><li><code>I8</code></li><li><code>I16</code></li><li><code>I32</code></li><li><code>I64</code></li><li><code>U8</code></li><li><code>U16</code></li><li><code>U32</code></li><li><code>U64</code></li><li><code>Uint</code></li><li><code>Int</code></li><li><code>Uintptr</code></li><li><code>Bool</code></li><li><code>Str</code></li><li><code>Any</code></li><li><code>True</code></li><li><code>False</code></li><li><code>Nil</code></li><li><code>Const</code></li><li><code>Ret</code></li><li><code>Type</code></li><li><code>For</code></li><li><code>Break</code></li><li><code>Cont</code></li><li><code>In</code></li><li><code>If</code></li><li><code>Else</code></li><li><code>Use</code></li><li><code>Pub</code></li><li><code>Goto</code></li><li><code>Enum</code></li><li><code>Struct</code></li><li><code>Co</code></li><li><code>Match</code></li><li><code>Self</code></li><li><code>Trait</code></li><li><code>Impl</code></li><li><code>Cpp</code></li><li><code>Fall</code></li><li><code>Fn</code></li><li><code>Let</code></li><li><code>Unsafe</code></li><li><code>Mut</code></li><li><code>Defer</code></li><li><code>Static</code></li><li><code>Hash</code></li><li><code>Error</code></li></ul>',129),i=[o];function p(c,r,t,d,u,b){return e(),l("div",null,i)}const h=s(a,[["render",p]]);export{y as __pageData,h as default};
