import{_ as e,o as n,c as a,Q as c}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Concurrency","description":"","frontmatter":{},"headers":[],"relativePath":"api/concurrency.md","filePath":"api/concurrency.md"}'),o={name:"api/concurrency.md"},r=c('<h1 id="concurrency" tabindex="-1">Concurrency <a class="header-anchor" href="#concurrency" aria-label="Permalink to &quot;Concurrency&quot;">â€‹</a></h1><p>The Jule API provides functionalities for concurrency. For example, it provides a macro function to make a concurrent function call.</p><p>Relevant macro define (in <code>fn.hpp</code>):</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_CO</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">EXPR</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This macro creates a native thread and calls <code>detach</code>.</p>',5),s=[r];function t(p,i,l,d,u,_){return n(),a("div",null,s)}const y=e(o,[["render",t]]);export{m as __pageData,y as default};
