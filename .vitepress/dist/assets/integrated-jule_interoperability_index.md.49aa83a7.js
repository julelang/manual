import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const b=JSON.parse('{"title":"Interoperability","description":"","frontmatter":{},"headers":[],"relativePath":"integrated-jule/interoperability/index.md","filePath":"integrated-jule/interoperability/index.md"}'),l={name:"integrated-jule/interoperability/index.md"},p=e(`<h1 id="interoperability" tabindex="-1">Interoperability <a class="header-anchor" href="#interoperability" aria-label="Permalink to &quot;Interoperability&quot;">​</a></h1><p>Jule can interop with C++. A code written in C++ compatible with Jule can be transferred to Jule, used and compiled without any problems. Everything needed is readily available, as JuleC imports APIs by default to every generated code.</p><h2 id="using-linked-definitions" tabindex="-1">Using Linked Definitions <a class="header-anchor" href="#using-linked-definitions" aria-label="Permalink to &quot;Using Linked Definitions&quot;">​</a></h2><p>C++ links are stored separately. So to access C++ definitions it is necessary to use the C++ scope. The keyword <code>cpp</code> is used to use the C++ scope. The linked identifier can be used after the expression <code>cpp.</code>.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.my_variable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.my_struct{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">my_function</span><span style="color:#E1E4E8;">(x, y, z)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="example-to-interoperability" tabindex="-1">Example to Interoperability <a class="header-anchor" href="#example-to-interoperability" aria-label="Permalink to &quot;Example to Interoperability&quot;">​</a></h2><p><strong>sum.hpp</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Slice</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Int</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Int total{ </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> Int x: slice)</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>main.jule</strong></p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sum.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> numbers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">cpp</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(numbers)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">outln</span><span style="color:#E1E4E8;">(total)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>The above example demonstrates the interoperability of Jule with a C++ function that returns total of all values of an integer slice. The C++ header file is written entirely using the Jule API. The <code>Int</code>, and <code>Slice</code> types used are part of the API. The <code>Int</code> data type is equally sensitive to system architecture as in Jule. The Jule source code declares to use <code>sum.hpp</code> first and binds the C++ function in it to Jule accordingly. Then a call is made from Jule and the result of the function is written to the command line.</p>`,14),o=[p];function t(r,c,i,E,y,d){return n(),a("div",null,o)}const m=s(l,[["render",t]]);export{b as __pageData,m as default};
