import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.7cd3ab18.js";const f=JSON.parse('{"title":"Deferred Scopes","description":"","frontmatter":{},"headers":[],"relativePath":"api/deferred-scopes.md","filePath":"api/deferred-scopes.md"}'),p={name:"api/deferred-scopes.md"},o=n(`<h1 id="deferred-scopes" tabindex="-1">Deferred Scopes <a class="header-anchor" href="#deferred-scopes" aria-label="Permalink to &quot;Deferred Scopes&quot;">â€‹</a></h1><p>The definitions provided by the API are used to implement Jule&#39;s deferred scopes. Deferred scopes are essentially a C++ lambda function and are assigned to a wrapper that calls the function in the destructor when it goes out of scope.</p><p>There is also a macro to do this quickly:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_DEFER</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">BLOCK</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>For example to use:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">__JULE_DEFER</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello from Jule deferred scopes!&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,6),l=[o];function r(t,c,d,i,E,u){return e(),a("div",null,l)}const y=s(p,[["render",r]]);export{f as __pageData,y as default};
