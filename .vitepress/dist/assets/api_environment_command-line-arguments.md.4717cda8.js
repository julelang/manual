import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.7cd3ab18.js";const y=JSON.parse('{"title":"Command-Line Arguments","description":"","frontmatter":{},"headers":[],"relativePath":"api/environment/command-line-arguments.md","filePath":"api/environment/command-line-arguments.md"}'),l={name:"api/environment/command-line-arguments.md"},p=e(`<h1 id="command-line-arguments" tabindex="-1">Command-Line Arguments <a class="header-anchor" href="#command-line-arguments" aria-label="Permalink to &quot;Command-Line Arguments&quot;">​</a></h1><p>The API has a variable for command-line arguments. But this variables are does not hold anything by default. The <code>argc</code> variable is count of command line arguments, and the <code>argv</code> variable is command line arguments.</p><p>Relevant variable (in <code>env.hpp</code>):</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> argc;</span></span>
<span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">argv;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="setup-command-line-arguments" tabindex="-1">Setup Command-Line Arguments <a class="header-anchor" href="#setup-command-line-arguments" aria-label="Permalink to &quot;Setup Command-Line Arguments&quot;">​</a></h2><p>There is a function to set the command-line arguments variables. This function sets the value of the <code>jule::argc</code>, and <code>jule::argv</code> variables. It takes <code>argc</code> and <code>argv</code> as arguments.</p><p>Relevant function (in <code>env.hpp</code>):</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_argv</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>For example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;api/jule.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#FFAB70;">envp</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">setup_argv</span><span style="color:#E1E4E8;">(argc, argv);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="get-command-line-arguments" tabindex="-1">Get Command-Line Arguments <a class="header-anchor" href="#get-command-line-arguments" aria-label="Permalink to &quot;Get Command-Line Arguments&quot;">​</a></h2><p>There is a function for get command-line arguments as Jule slice. It uses <code>jule::argc</code> and <code>jule::argv</code> variables internally, therefore you should call <code>jule::setup_argv</code> function before. But the <code>jule::arc</code> and <code>jule::argv</code> variables are not used on Windows systems. The Windows implementation uses the <code>GetCommandLineW</code> and <code>CommandLineToArgvW</code> functions.</p><p>For example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;api/jule.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#FFAB70;">envp</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">setup_argv</span><span style="color:#E1E4E8;">(argc, argv);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">outln</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">jule</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">args</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>JuleC generates IR wich is calls the setup function in entry point by default.</p></div>`,15),o=[p];function r(c,t,i,E,d,u){return n(),a("div",null,o)}const b=s(l,[["render",r]]);export{y as __pageData,b as default};
