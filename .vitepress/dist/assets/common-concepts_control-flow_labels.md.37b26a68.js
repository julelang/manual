import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Labels","description":"","frontmatter":{},"headers":[],"relativePath":"common-concepts/control-flow/labels.md","filePath":"common-concepts/control-flow/labels.md"}'),l={name:"common-concepts/control-flow/labels.md"},o=n(`<h1 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-label="Permalink to &quot;Labels&quot;">​</a></h1><p>Goto statements need labels to jump somewhere in the algorithm. To declare a label, simply put the name of the tag followed by a colon.</p><p>For example: <code>repeat:</code></p><h2 id="going-to-labels" tabindex="-1">Going to Labels <a class="header-anchor" href="#going-to-labels" aria-label="Permalink to &quot;Going to Labels&quot;">​</a></h2><p>The goto statements allow you to jump to any part of the algorithm. The <code>goto</code> keyword is used for a goto statement. Jumping to a label is as simple as defining a label. First comes the keyword, then the label you want to jump to.</p><p>For example: <code>goto repeat</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>You can jump to any label without breaking the rules.</li><li>Labels are only valid for the function block you are in.</li></ul></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>If your jumps over any declaration you will get a compiler error.</li><li>Each label declared and not used causes a compiler error.</li></ul></div><h2 id="labels-for-break-and-continue-keywords" tabindex="-1">Labels for <code>break</code> and <code>continue</code> Keywords <a class="header-anchor" href="#labels-for-break-and-continue-keywords" aria-label="Permalink to &quot;Labels for \`break\` and \`continue\` Keywords&quot;">​</a></h2><p>When using nested iterations or match expressions, the keywords <code>break</code> and <code>continue</code> are targeted to the last valid block. This makes it harder to target outer loops or the match expression.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>An infinite iteration appears in this example. The <code>break</code> keyword inside the match expression breaks the match expression. This way there is no way to break the infinite loop. Maybe alternative solutions like using a goto label outside of the iteration could be adopted but this is confusion.</p><p>Again, label can be used to clear up this confusion. This is a more maintainable and clearer solution. Labels defined before an iteration and match expression can be used for targeting.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">loop:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> loop</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>The above example will break the iteration outside. Because the &quot;loop&quot; label used by the <code>break</code> keyword indicates that iteration.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>These labels are not special for that, so <code>goto</code> keyword can use these labels.</p></div>`,18),p=[o];function t(r,c,i,d,b,u){return a(),e("div",null,p)}const h=s(l,[["render",t]]);export{m as __pageData,h as default};
