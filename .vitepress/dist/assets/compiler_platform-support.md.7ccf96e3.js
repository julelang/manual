import{_ as e,o as t,c as o,Q as r}from"./chunks/framework.7cd3ab18.js";const f=JSON.parse('{"title":"Platform Support","description":"","frontmatter":{},"headers":[],"relativePath":"compiler/platform-support.md","filePath":"compiler/platform-support.md"}'),a={name:"compiler/platform-support.md"},p=r('<h1 id="platform-support" tabindex="-1">Platform Support <a class="header-anchor" href="#platform-support" aria-label="Permalink to &quot;Platform Support&quot;">​</a></h1><p>Jule supports multiple platforms. JuleC undertakes that the code and standard library it produces will be compatible with all these platforms. When you try to compile for a platform other than officially supported platforms, it is not guaranteed that it will be supported and the code will work correctly.</p><h2 id="supported-operating-systems" tabindex="-1">Supported Operating Systems <a class="header-anchor" href="#supported-operating-systems" aria-label="Permalink to &quot;Supported Operating Systems&quot;">​</a></h2><ul><li><code>windows</code></li><li><code>darwin</code></li><li><code>linux</code></li></ul><p>The <code>unix</code> includes: <code>darwin</code> <code>linux</code></p><h2 id="supported-architectures" tabindex="-1">Supported Architectures <a class="header-anchor" href="#supported-architectures" aria-label="Permalink to &quot;Supported Architectures&quot;">​</a></h2><ul><li><code>i386</code></li><li><code>amd64</code></li><li><code>arm64</code></li></ul><p>The <code>x64</code> includes: <code>amd64</code> <code>arm64</code></p><p>The <code>x32</code> includes: <code>i386</code></p>',9),d=[p];function l(c,i,s,u,n,m){return t(),o("div",null,d)}const _=e(a,[["render",l]]);export{f as __pageData,_ as default};
