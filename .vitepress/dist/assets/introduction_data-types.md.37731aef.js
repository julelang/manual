import{_ as e,o as a,c as s,Q as t}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"Data Types","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/data-types.md","filePath":"introduction/data-types.md"}'),n={name:"introduction/data-types.md"},l=t('<h1 id="data-types" tabindex="-1">Data Types <a class="header-anchor" href="#data-types" aria-label="Permalink to &quot;Data Types&quot;">​</a></h1><p>Jule is designed strongly typed. Therefore, the data-types of all values must be specified during compilation. In this section we will look at the builtin types offered by the compiler.</p><h2 id="primitive-types" tabindex="-1">Primitive Types <a class="header-anchor" href="#primitive-types" aria-label="Permalink to &quot;Primitive Types&quot;">​</a></h2><table><thead><tr><th>Type</th><th>Typical Bit Width</th><th>Typical Range</th></tr></thead><tbody><tr><td>i8</td><td>1 byte</td><td>-128 to 127</td></tr><tr><td>i16</td><td>2 bytes</td><td>-32768 to 32767</td></tr><tr><td>i32</td><td>4 bytes</td><td>-2147483648 to 2147483647</td></tr><tr><td>i64</td><td>8 bytes</td><td>-9223372036854775808 to 9223372036854775807</td></tr><tr><td>int</td><td>Platform dependent</td><td>Platform dependent (signed)</td></tr><tr><td>u8</td><td>1 byte</td><td>0 to 255</td></tr><tr><td>u16</td><td>2 bytes</td><td>0 to 65535</td></tr><tr><td>u32</td><td>4 bytes</td><td>0 to 4294967295</td></tr><tr><td>u64</td><td>8 bytes</td><td>0 to 18446744073709551615</td></tr><tr><td>uint</td><td>Platform dependent</td><td>Platform dependent (unsigned)</td></tr><tr><td>uintptr</td><td>Platform dependent</td><td>It is a unsigned integer type that is big enough to hold a pointer.</td></tr><tr><td>f32</td><td>4 bytes</td><td>-3.4028234663852886e+38 to 3.4028234663852886e+38</td></tr><tr><td>f64</td><td>8 bytes</td><td>-1.797693134862315708e+308 to 1.797693134862315708e+308</td></tr><tr><td>bool</td><td>1 byte</td><td>true or false</td></tr><tr><td>str</td><td>-</td><td>UTF-8 byte encoded character string.</td></tr><tr><td>any</td><td>-</td><td>Any data.</td></tr></tbody></table><h2 id="type-compability" tabindex="-1">Type Compability <a class="header-anchor" href="#type-compability" aria-label="Permalink to &quot;Type Compability&quot;">​</a></h2><table><thead><tr><th>Type</th><th>Compatible Types</th></tr></thead><tbody><tr><td>i8</td><td>i8</td></tr><tr><td>i16</td><td>i8, i16</td></tr><tr><td>i32</td><td>i8, i16, i32</td></tr><tr><td>i64</td><td>i8, i16, i32, i64</td></tr><tr><td>int</td><td>Platform dependent (signed)</td></tr><tr><td>u8</td><td>u8</td></tr><tr><td>u16</td><td>u8, u16</td></tr><tr><td>u32</td><td>u8, u16, u32</td></tr><tr><td>u64</td><td>u8, u16, u32, u64</td></tr><tr><td>uint</td><td>Platform dependent (unsigned)</td></tr><tr><td>uintptr</td><td>Platform dependent (unsigned)</td></tr><tr><td>f32</td><td>f32</td></tr><tr><td>f64</td><td>f64</td></tr><tr><td>bool</td><td>bool</td></tr><tr><td>str</td><td>str</td></tr><tr><td>any</td><td>Any type.</td></tr></tbody></table><h2 id="integer-literals" tabindex="-1">Integer Literals <a class="header-anchor" href="#integer-literals" aria-label="Permalink to &quot;Integer Literals&quot;">​</a></h2><h3 id="decimal" tabindex="-1">Decimal <a class="header-anchor" href="#decimal" aria-label="Permalink to &quot;Decimal&quot;">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">12345</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="binary" tabindex="-1">Binary <a class="header-anchor" href="#binary" aria-label="Permalink to &quot;Binary&quot;">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0b0001010101</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="octal" tabindex="-1">Octal <a class="header-anchor" href="#octal" aria-label="Permalink to &quot;Octal&quot;">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0455</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0o455</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="hexadecimal" tabindex="-1">Hexadecimal <a class="header-anchor" href="#hexadecimal" aria-label="Permalink to &quot;Hexadecimal&quot;">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0xDFF90</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="floating-point-literals" tabindex="-1">Floating-Point Literals <a class="header-anchor" href="#floating-point-literals" aria-label="Permalink to &quot;Floating-Point Literals&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">3.14</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">32.60</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">032.60</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0.3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">E2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">12345</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">.e</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0x1</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0x2</span><span style="color:#E1E4E8;">.p10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0x1</span><span style="color:#E1E4E8;">.Fp</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">X.</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0x1fff</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">16</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">0x15e</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="byte-and-rune-literals" tabindex="-1">Byte and Rune Literals <a class="header-anchor" href="#byte-and-rune-literals" aria-label="Permalink to &quot;Byte and Rune Literals&quot;">​</a></h2><p>A byte or rune literal is represented by a single character between single quotes. Since it is typically a string element, it supports the same escape sequences. Literal can be evaluated in two ways, these are byte literal and rune literal. If your character is small enough to be a byte (0 &lt;= b &lt;= 255) it is treated as a byte, otherwise it is treated as a rune.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// byte</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;ç&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// rune</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><p>Jule strings are UTF-8 encoded byte-by-byte, and support Unicode. They are also mutable. So you don&#39;t need to use String Builder to compensate for the inefficiency of immutable strings as in some other languages, string concatenations are less of a performance concern.</p><p>Strings support the <code>+</code> operator for concatenation, It&#39;s that easy to concatenate two strings. Additionally, using the <code>==</code> and <code>!=</code> operators, you can easily determine whether two strings are the same or not.</p><h3 id="string-literals" tabindex="-1">String Literals <a class="header-anchor" href="#string-literals" aria-label="Permalink to &quot;String Literals&quot;">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;String literal of Jule.&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>String literals have a escape sequences.</p><table><thead><tr><th>Escape</th><th>Description</th></tr></thead><tbody><tr><td>\\\\</td><td>Backslash</td></tr><tr><td>\\a</td><td>ASCII Bell.</td></tr><tr><td>\\b</td><td>ASCII Backspace.</td></tr><tr><td>\\f</td><td>ASCII Formfeed.</td></tr><tr><td>\\n</td><td>ASCII Linefeed.</td></tr><tr><td>\\r</td><td>Carriage return.</td></tr><tr><td>\\t</td><td>ASCII Horizontal tab.</td></tr><tr><td>\\v</td><td>ASCII Vertical tab.</td></tr><tr><td>\\&#39;</td><td>Single quote.</td></tr><tr><td>\\&quot;</td><td>Double quote.</td></tr><tr><td>\\xhh</td><td>The byte whose numerical value is given by hh… interpreted as a hexadecimal number.</td></tr><tr><td>\\uhhhh</td><td>Unicode code point below 10000 hexadecimal.</td></tr><tr><td>\\Uhhhhhhhh</td><td>Unicode code point where h is a hexadecimal digit.</td></tr><tr><td>\\nnn</td><td>The byte whose numerical value is given by nnn interpreted as an octal number.</td></tr></tbody></table><h3 id="raw-string-literals" tabindex="-1">Raw String Literals <a class="header-anchor" href="#raw-string-literals" aria-label="Permalink to &quot;Raw String Literals&quot;">​</a></h3><p>Raw strings do not contain escape sequences and are not required to be defined in a single line. They are represents with <code>`</code>.</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">`Raw String literal of Jule.`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">`Raw String literal of Jule</span></span>\n<span class="line"><span style="color:#9ECBFF;">with</span></span>\n<span class="line"><span style="color:#9ECBFF;">new</span></span>\n<span class="line"><span style="color:#9ECBFF;">    lines.`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="nil" tabindex="-1">Nil <a class="header-anchor" href="#nil" aria-label="Permalink to &quot;Nil&quot;">​</a></h2><p>Zero value for pointers and function data typed defines.</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">nil</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">​</a></h2><p>It can be hold any data type and nil. Only supports equals (==) and not equals (!=) operators.</p><p><code>x == nil</code>: true if <code>any</code> is nil, not checks whether data is nil<br><code>x == y</code>: true if x and y is nil<br><code>x == y</code>: true if x and y has same data type and returns true of equals operator of data type for two value</p><p>Supports casting to any type. You can get type-safe value of <code>any</code> with casting. For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> my_any: </span><span style="color:#F97583;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)(my_any)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>any</code> type protects itself against mutability if necessary. For example, you have slice value holds by any-typed variable. And your variable is immutable. So, if you cast your value to slice for assign to mutable variable, you will get error. Because of slice is mutable type, so it&#39;s breaking immutability.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is is very unsafe, also blocks deriving <code>Clone</code>. Avoid using any whenever possible.</p></div>',58),r=[l];function i(d,o,p,c,u,b){return a(),s("div",null,r)}const m=e(n,[["render",i]]);export{h as __pageData,m as default};
