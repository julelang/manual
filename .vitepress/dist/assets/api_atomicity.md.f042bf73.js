import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.7cd3ab18.js";const m=JSON.parse('{"title":"Atomicity","description":"","frontmatter":{},"headers":[],"relativePath":"api/atomicity.md","filePath":"api/atomicity.md"}'),p={name:"api/atomicity.md"},l=n('<h1 id="atomicity" tabindex="-1">Atomicity <a class="header-anchor" href="#atomicity" aria-label="Permalink to &quot;Atomicity&quot;">​</a></h1><p>Jule provides C-style macro functions for atomicity in <code>atomic.hpp</code> header. While you can&#39;t normally use the <code>stdatomic.h</code> header with C++, the definitions are pretty similar to the <code>stdatomic.h</code> implementation.</p><h2 id="macro-defines-for-memory-ordering" tabindex="-1">Macro Defines for Memory Ordering <a class="header-anchor" href="#macro-defines-for-memory-ordering" aria-label="Permalink to &quot;Macro Defines for Memory Ordering&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_ATOMIC_MEMORY_ORDER__RELAXED</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_ATOMIC_MEMORY_ORDER__RELEASE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_ATOMIC_MEMORY_ORDER__CONSUME</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_ATOMIC_MEMORY_ORDER__ACQUIRE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_ATOMIC_MEMORY_ORDER__ACQ_REL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__JULE_ATOMIC_MEMORY_ORDER__SEQ_CST</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="macro-functions" tabindex="-1">Macro Functions <a class="header-anchor" href="#macro-functions" aria-label="Permalink to &quot;Macro Functions&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_store_explicit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">VAL</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">MO</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Atomically stores val into addr by memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_store</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">VAL</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Calls <code>__jule_atomic_store_explicit</code> with SeqCst memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_load_explicit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">MO</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Atomically loads value of addr by memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_load</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Calls <code>__jule_atomic_load_explicit</code> with SeqCst memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_swap_explicit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">NEW</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">MO</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Atomically stores new into addr and returns the previous addr value by memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_swap</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">NEW</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Calls <code>__jule_atomic_swap</code> with SeqCst memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_compare_swap_explicit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">OLD</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">NEW</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">SUC</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">FAIL</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Executes the compare-and-swap operation for addr by memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_compare_swap</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">OLD</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">NEW</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Calls <code>__jule_atomic_compare_swap_explicit</code> with SeqCst memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_add_explicit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">DELTA</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">MO</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Atomically adds delta to addr and returns the previous addr value by memory ordering.</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__jule_atomic_add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ADDR</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">DELTA</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Calls <code>__jule_atomic_add</code> with SeqCst memory ordering.</p>',39),o=[l];function r(c,t,i,d,E,y){return a(),e("div",null,o)}const _=s(p,[["render",r]]);export{m as __pageData,_ as default};
