import{_ as e,o,c as i,Q as l}from"./chunks/framework.7cd3ab18.js";const f=JSON.parse('{"title":"std::jule::build","description":"","frontmatter":{},"headers":[],"relativePath":"std/jule-build.md","filePath":"std/jule-build.md"}'),c={name:"std/jule-build.md"},d=l('<h1 id="std-jule-build" tabindex="-1">std::jule::build <a class="header-anchor" href="#std-jule-build" aria-label="Permalink to &quot;std::jule::build&quot;">​</a></h1><h2 id="globals" tabindex="-1">Globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;Globals&quot;">​</a></h2><h3 id="const-ext-str" tabindex="-1"><code>const EXT: str</code> <a class="header-anchor" href="#const-ext-str" aria-label="Permalink to &quot;`const EXT: str`&quot;">​</a></h3><p>Extension (includes dot) of Jule source code files.</p><hr><h3 id="const-api-str" tabindex="-1"><code>const API: str</code> <a class="header-anchor" href="#const-api-str" aria-label="Permalink to &quot;`const API: str`&quot;">​</a></h3><p>Directory name of JuleC++ API.</p><hr><h3 id="const-stdlib-str" tabindex="-1"><code>const STDLIB: str</code> <a class="header-anchor" href="#const-stdlib-str" aria-label="Permalink to &quot;`const STDLIB: str`&quot;">​</a></h3><p>Directory name of standard library.</p><hr><h3 id="const-entry-point-str" tabindex="-1"><code>const ENTRY_POINT: str</code> <a class="header-anchor" href="#const-entry-point-str" aria-label="Permalink to &quot;`const ENTRY_POINT: str`&quot;">​</a></h3><p>Identifier of entry point function.</p><hr><h3 id="const-init-fn-str" tabindex="-1"><code>const INIT_FN: str</code> <a class="header-anchor" href="#const-init-fn-str" aria-label="Permalink to &quot;`const INIT_FN: str`&quot;">​</a></h3><p>Identifier of initializer function.</p><hr><h3 id="static-cpp-header-exts-str" tabindex="-1"><code>static CPP_HEADER_EXTS: [...]str</code> <a class="header-anchor" href="#static-cpp-header-exts-str" aria-label="Permalink to &quot;`static CPP_HEADER_EXTS: [...]str`&quot;">​</a></h3><p>Valid extensions of C++ headers.</p><hr><h3 id="static-cpp-exts-str" tabindex="-1"><code>static CPP_EXTS: [...]str</code> <a class="header-anchor" href="#static-cpp-exts-str" aria-label="Permalink to &quot;`static CPP_EXTS: [...]str`&quot;">​</a></h3><p>Valid extensions of C++ source files.</p><hr><h3 id="static-objective-cpp-exts-str" tabindex="-1"><code>static OBJECTIVE_CPP_EXTS: [...]str</code> <a class="header-anchor" href="#static-objective-cpp-exts-str" aria-label="Permalink to &quot;`static OBJECTIVE_CPP_EXTS: [...]str`&quot;">​</a></h3><p>Valid extensions of Objective-C++ source files.</p><hr><h3 id="static-errors-str-str" tabindex="-1"><code>static ERRORS: [str:str]</code> <a class="header-anchor" href="#static-errors-str-str" aria-label="Permalink to &quot;`static ERRORS: [str:str]`&quot;">​</a></h3><p>Error messages.</p><hr><h3 id="static-distos-os" tabindex="-1"><code>static DISTOS: [...]Os</code> <a class="header-anchor" href="#static-distos-os" aria-label="Permalink to &quot;`static DISTOS: [...]Os`&quot;">​</a></h3><p>List of supported operating systems.</p><hr><h3 id="static-distarch-arch" tabindex="-1"><code>static DISTARCH: [...]Arch</code> <a class="header-anchor" href="#static-distarch-arch" aria-label="Permalink to &quot;`static DISTARCH: [...]Arch`&quot;">​</a></h3><p>List of supported architectures.</p><hr><h3 id="const-directive-prefix-str" tabindex="-1"><code>const DIRECTIVE_PREFIX: str</code> <a class="header-anchor" href="#const-directive-prefix-str" aria-label="Permalink to &quot;`const DIRECTIVE_PREFIX: str`&quot;">​</a></h3><p>Prefix of directive comments.</p><hr><h3 id="static-path-stdlib-str" tabindex="-1"><code>static PATH_STDLIB: str</code> <a class="header-anchor" href="#static-path-stdlib-str" aria-label="Permalink to &quot;`static PATH_STDLIB: str`&quot;">​</a></h3><p>Path of standard library.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Initialized by initializer function.</p></div><hr><h3 id="static-path-exec-str" tabindex="-1"><code>static PATH_EXEC: str</code> <a class="header-anchor" href="#static-path-exec-str" aria-label="Permalink to &quot;`static PATH_EXEC: str`&quot;">​</a></h3><p>Path of executable file&#39;s directory.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Initialized by initializer function.</p></div><hr><h3 id="static-path-wd-str" tabindex="-1"><code>static PATH_WD: str</code> <a class="header-anchor" href="#static-path-wd-str" aria-label="Permalink to &quot;`static PATH_WD: str`&quot;">​</a></h3><p>Path of working directory.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Initialized by initializer function.</p></div><hr><h3 id="static-path-api-str" tabindex="-1"><code>static PATH_API: str</code> <a class="header-anchor" href="#static-path-api-str" aria-label="Permalink to &quot;`static PATH_API: str`&quot;">​</a></h3><p>Path of main API header file.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Initialized by initializer function.</p></div><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><p><code>fn is_top_directive(directive: str): bool</code><br> Reports whether directive is top-directive.</p><hr><p><code>fn is_std_header_path(p: str): bool</code><br> Reports whether path is C++ std library path.</p><hr><p><code>fn is_valid_cpp_ext(p: str): bool</code><br> Reports whether C++ extension is valid.</p><hr><p><code>fn is_valid_header_ext(ext: str): bool</code><br> Reports whether C++ header extension is valid.</p><hr><p><code>fn is_jule(path: str): bool</code><br> Reports whether file path is Jule source code.</p><hr><p><code>fn logf(key: str, args: ...any): str</code><br> Returns formatted error message by fmt and args.</p><hr><p><code>fn is_windows(os: str): bool</code><br> Reports whether os is windows.</p><hr><p><code>fn is_darwin(os: str): bool</code><br> Reports whether os is darwin.</p><hr><p><code>fn is_linux(os: str): bool</code><br> Reports whether os is linux.</p><hr><p><code>fn is_i386(arch: str): bool</code><br> Reports whether architecture is intel 386.</p><hr><p><code>fn is_amd64(arch: str): bool</code><br> Reports whether architecture is amd64.</p><hr><p><code>fn is_arm64(arch: str): bool</code><br> Reports whether architecture is arm64.</p><hr><p><code>fn is_unix(os: str): bool</code><br> Reports whether os is unix.</p><hr><p><code>fn is_32bit(arch: str): bool</code><br> Reports whether architecture is 32-bit.</p><hr><p><code>fn is_64bit(arch: str): bool</code><br> Reports whether architecture is 64-bit.</p><h2 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Log {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    kind:       LogKind</span></span>\n<span class="line"><span style="color:#E1E4E8;">    row:        </span><span style="color:#F97583;">int</span></span>\n<span class="line"><span style="color:#E1E4E8;">    column:     </span><span style="color:#F97583;">int</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path:       </span><span style="color:#F97583;">str</span></span>\n<span class="line"><span style="color:#E1E4E8;">    text:       </span><span style="color:#F97583;">str</span></span>\n<span class="line"><span style="color:#E1E4E8;">    line:       </span><span style="color:#F97583;">str</span></span>\n<span class="line"><span style="color:#E1E4E8;">    suggestion: </span><span style="color:#F97583;">str</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Compiler log.</p><hr><h2 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h2><p><code>enum Directive: str</code></p><p>Compiler directives.</p><p><strong>Fields:</strong></p><ul><li><code>Cdef</code></li><li><code>Typedef</code></li><li><code>Derive</code></li><li><code>Pass</code></li><li><code>Build</code></li><li><code>Namespace</code></li><li><code>Deprecated</code></li></ul><hr><p><code>enum Os: str</code></p><p>Operating Systems for file annotation kind.</p><p><strong>Fields:</strong></p><ul><li><code>Windows</code></li><li><code>Linux</code></li><li><code>Darwin</code></li><li><code>Unix</code></li></ul><hr><p><code>enum Arch: str</code></p><p>Architectures for file annotation kind.</p><p><strong>Fields:</strong></p><ul><li><code>I386</code></li><li><code>Arm64</code></li><li><code>Amd64</code></li><li><code>X32</code></li><li><code>X64</code></li></ul><hr><p><code>enum Derive: str</code></p><p>All built-in derive defines.</p><p><strong>Fields:</strong></p><ul><li><code>Clone</code></li></ul><hr><p><code>enum LogKind</code></p><p>Log kinds.</p><p><strong>Fields:</strong></p><ul><li><code>Flat</code>: Just text.</li><li><code>Error</code>: Error message.</li></ul><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> LogMsg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Compiler log messages with formatting.</p><p><strong>Fields:</strong></p><ul><li><p><code>Empty</code></p></li><li><p><code>StdlibNotExist</code></p></li><li><p><code>FileNotUseable</code></p></li><li><p><code>FileNotJule</code></p></li><li><p><code>NoEntryPoint</code></p></li><li><p><code>DuplicatedIdent</code></p></li><li><p><code>ExtraClosedParent</code></p></li><li><p><code>ExtraClosedBrace</code></p></li><li><p><code>ExtraClosedBracket</code></p></li><li><p><code>WaitCloseParent</code></p></li><li><p><code>WaitCloseBrace</code></p></li><li><p><code>WaitCloseBracket</code></p></li><li><p><code>ExpectedParentClose</code></p></li><li><p><code>ExpectedBraceClose</code></p></li><li><p><code>ExpectedBracketClose</code></p></li><li><p><code>BodyNotExist</code></p></li><li><p><code>OperatorOverflow</code></p></li><li><p><code>IncompatibleTypes</code></p></li><li><p><code>OperatorNotForJuleType</code></p></li><li><p><code>OperatorNotForFloat</code></p></li><li><p><code>OperatorNotForInt</code></p></li><li><p><code>OperatorNotForUint</code></p></li><li><p><code>IdentNotExist</code></p></li><li><p><code>NotFnCall</code></p></li><li><p><code>ArgumentOverflow</code></p></li><li><p><code>FnHaveRet</code></p></li><li><p><code>FnHaveParameters</code></p></li><li><p><code>FnIsUnsafe</code></p></li><li><p><code>RequireRetExpr</code></p></li><li><p><code>VoidFnRetExpr</code></p></li><li><p><code>BitShiftMustUnsigned</code></p></li><li><p><code>LogicalNotBool</code></p></li><li><p><code>AssignConst</code></p></li><li><p><code>AssignRequireLvalue</code></p></li><li><p><code>AssignTypeNotSupportValue</code></p></li><li><p><code>InvalidToken</code></p></li><li><p><code>InvalidSyntax</code></p></li><li><p><code>InvalidType</code></p></li><li><p><code>InvalidNumericRange</code></p></li><li><p><code>InvalidOperator</code></p></li><li><p><code>InvalidExprForUnary </code></p></li><li><p><code>InvalidEscapeSeq</code></p></li><li><p><code>InvalidTypeSource</code></p></li><li><p><code>InvalidPragmaDirective</code></p></li><li><p><code>InvalidTypeForConst</code></p></li><li><p><code>InvalidValueForKey</code></p></li><li><p><code>InvalidExpr</code></p></li><li><p><code>InvalidCppExt</code></p></li><li><p><code>InvalidLabel</code></p></li><li><p><code>InvalidExprForTypeInference</code></p></li><li><p><code>MissingValueForTypeInference</code></p></li><li><p><code>MissingType</code></p></li><li><p><code>MissingExpr</code></p></li><li><p><code>MissingBlockCommentClose</code></p></li><li><p><code>MissingRuneEnd</code></p></li><li><p><code>MissingRet</code></p></li><li><p><code>MissingStrEnd</code></p></li><li><p><code>MissingMultiRet</code></p></li><li><p><code>MissingMultiAssignIdents</code></p></li><li><p><code>MissingUsePath</code></p></li><li><p><code>MissingPragmaDirective</code></p></li><li><p><code>MissingGotoLabel</code></p></li><li><p><code>MissingExprFor</code></p></li><li><p><code>MissingGenerics</code></p></li><li><p><code>MissingReceiver</code></p></li><li><p><code>MissingFnParentheses</code></p></li><li><p><code>ExprNotConst</code></p></li><li><p><code>NilForTypeInference</code></p></li><li><p><code>VoidForTypeInference</code></p></li><li><p><code>RuneEmpty</code></p></li><li><p><code>RuneOverflow</code></p></li><li><p><code>NotSupportsIndexing</code></p></li><li><p><code>NotSupportsSlicing</code></p></li><li><p><code>AlreadyConst</code></p></li><li><p><code>AlreadyVariadic</code></p></li><li><p><code>AlreadyReference</code></p></li><li><p><code>DuplicateUseDecl</code></p></li><li><p><code>IgnoreIdent</code></p></li><li><p><code>OverflowMultiAssignIdents</code></p></li><li><p><code>OverflowRet</code></p></li><li><p><code>BreakAtOutOfValidScope</code></p></li><li><p><code>ContinueAtOutOfValidScope</code></p></li><li><p><code>IterWhileRequireBoolExpr</code></p></li><li><p><code>IterRangeRequireEnumerableExpr</code></p></li><li><p><code>MuchRangeVars</code></p></li><li><p><code>IfRequireBoolExpr</code></p></li><li><p><code>ElseHaveExpr</code></p></li><li><p><code>VariadicParamNotLast</code></p></li><li><p><code>VariadicWithNonVariadicable</code></p></li><li><p><code>MoreArgsWithVariadiced</code></p></li><li><p><code>TypeNotSupportsCasting</code></p></li><li><p><code>TypeNotSupportsCastingTo</code></p></li><li><p><code>UseAtContent</code></p></li><li><p><code>UseNotFound</code></p></li><li><p><code>UsedPackageHasErrors</code></p></li><li><p><code>DefNotSupportPub</code></p></li><li><p><code>ObjNotSupportSubFields</code></p></li><li><p><code>ObjHaveNotIdent</code></p></li><li><p><code>TypeNotSupportSubFields</code></p></li><li><p><code>TypeHaveNotIdent</code></p></li><li><p><code>DocCouldntGenerated</code></p></li><li><p><code>DeclaredButNotUsed</code></p></li><li><p><code>ExprNotFnCall</code></p></li><li><p><code>LabelExist</code></p></li><li><p><code>LabelNotExist</code></p></li><li><p><code>GotoJumpsDeclarations</code></p></li><li><p><code>FnNotHasParam</code></p></li><li><p><code>AlreadyHasExpr</code></p></li><li><p><code>ArgMustTargetToField</code></p></li><li><p><code>OverflowLimits</code></p></li><li><p><code>GenericsOverflow</code></p></li><li><p><code>HasGenerics</code></p></li><li><p><code>NotHasGenerics</code></p></li><li><p><code>TypeNotSupportsGenerics</code></p></li><li><p><code>DivByZero</code></p></li><li><p><code>TraitHaveNotIdent</code></p></li><li><p><code>NotImplTraitDef</code></p></li><li><p><code>DynamicTypeAnnotationFailed</code></p></li><li><p><code>FalltroughWrongUse</code></p></li><li><p><code>FallthroughIntoFinalCase</code></p></li><li><p><code>UnsafeBehaviorAtOutOfUnsafeScope</code></p></li><li><p><code>RefMethodUsedWithNotRefInstance</code></p></li><li><p><code>MethodAsAnonFn</code></p></li><li><p><code>CppFnAsAnonFn</code></p></li><li><p><code>GenericedFnAsAnonFn</code></p></li><li><p><code>IllegalCycleRefersItself</code></p></li><li><p><code>IllegalCrossCycle</code></p></li><li><p><code>AssignToNonMut</code></p></li><li><p><code>AssignNonMutToMut</code></p></li><li><p><code>RetWithMutTypedNonMut</code></p></li><li><p><code>MutOperationOnImmut</code></p></li><li><p><code>TraitHasRefParamFn</code></p></li><li><p><code>EnumHaveNotField</code></p></li><li><p><code>DuplicateMatchType</code></p></li><li><p><code>CppLinkedVarHasExpr</code></p></li><li><p><code>CppLinkedVarIsConst</code></p></li><li><p><code>ConstVarNotHaveExpr</code></p></li><li><p><code>RefRefsRef</code></p></li><li><p><code>RefRefsPtr</code></p></li><li><p><code>RefRefsArr</code></p></li><li><p><code>RefRefsEnum</code></p></li><li><p><code>PtrPointsRef</code></p></li><li><p><code>PtrPointsEnum</code></p></li><li><p><code>MissingExprForUnary</code></p></li><li><p><code>InvalidOpForUnary</code></p></li><li><p><code>UseDeclAtBody</code></p></li><li><p><code>ArrayAutoSized</code></p></li><li><p><code>NamespaceNotExist</code></p></li><li><p><code>ImplBaseNotExist</code></p></li><li><p><code>ImplDestNotExist</code></p></li><li><p><code>StructAlreadyHaveIdent</code></p></li><li><p><code>UnsafePtrIndexing</code></p></li><li><p><code>MethodHasGenericWithSameIdent</code></p></li><li><p><code>TupleAssignToSingle</code></p></li><li><p><code>MissingCompilePath</code></p></li><li><p><code>ArraySizeIsNotInt</code></p></li><li><p><code>ArraySizeIsNeg</code></p></li><li><p><code>BuiltinAsNonFn</code></p></li><li><p><code>TypeCaseHasNotValidExpr</code></p></li><li><p><code>IllegalImplOutOfPackage</code></p></li><li><p><code>MethodNotInvoked</code></p></li><li><p><code>DuplicatedUseSelection</code></p></li><li><p><code>IdentIsNotAccessible</code></p></li><li><p><code>InvalidStmtForNext</code></p></li><li><p><code>ModuloWithNotInt</code></p></li><li><p><code>PkgIllegalCycleRefersItself</code></p></li><li><p><code>PkgIllegalCrossCycle</code></p></li><li><p><code>RefersTo</code></p></li><li><p><code>NoFileInEntryPackage</code></p></li><li><p><code>NoMemberInEnum</code></p></li><li><p><code>TypeIsNotDerives</code></p></li><li><p><code>CloneNonLvalue</code></p></li><li><p><code>CloneImmutStruct</code></p></li><li><p><code>InternalTypeNotSupportsClone</code></p></li><li><p><code>TypeNotCompatibleForDerive</code></p></li><li><p><code>DeriveIllegalCycleRefersItself</code></p></li><li><p><code>DeriveIllegalCrossCycle</code></p></li><li><p><code>InvalidExprForBinop</code></p></li><li><p><code>CppLinkedStructForRef</code></p></li><li><p><code>TraitMethodHasGenerics</code></p></li><li><p><code>EnumAsMapVal</code></p></li><li><p><code>GlobalNotStatic</code></p></li><li><p><code>StaticNotHaveExpr</code></p></li><li><p><code>StaticFnHasReceiver</code></p></li><li><p><code>RefAssignNonVar</code></p></li><li><p><code>MutRefPointsImmut</code></p></li><li><p><code>RefNotInited</code></p></li><li><p><code>ConstRef</code></p></li><li><p><code>RefIsDangling</code></p></li><li><p><code>ConcurrenctCallWithRefParam</code></p></li><li><p><code>UsedRefInAnonFnFromParentScope</code></p></li><li><p><code>EnumCastedFromAny</code></p></li><li><p><code>DuplicatedUseAlias</code></p></li><li><p><code>MissedTernaryElse</code></p></li><li><p><code>TernaryCompatiblity</code></p></li><li><p><code>VoidUsedForTernary</code></p></li><li><p><code>BuiltinUsedForRef</code></p></li><li><p><code>RefPointsToInvalidType</code></p></li><li><p><code>DefaultNotLast</code></p></li><li><p><code>TraitImplHasStatic</code></p></li><li><p><code>IncompatibleTypeForPtrArithmetic</code></p></li><li><p><code>ComptimePanic</code></p></li><li><p><code>InvalidTypeForIndexing</code></p></li><li><p><code>UnusedDirective</code></p></li><li><p><code>UnsupportedDirective</code></p></li><li><p><code>ErrorWithNonExceptional</code></p></li><li><p><code>CDefineExceptional</code></p></li><li><p><code>HandledUnexceptional</code></p></li><li><p><code>UnhandledExceptional</code></p></li><li><p><code>MissingAssignRet</code></p></li><li><p><code>CoForExceptional</code></p></li><li><p><code>RetInDeferred</code></p></li><li><p><code>ErrorInDeferred</code></p></li><li><p><code>NilError</code></p></li><li><p><code>UseExprOutOfScope</code></p></li><li><p><code>UseExprInDeferred</code></p></li><li><p><code>UseExprNotLast</code></p></li><li><p><code>ExceptionalEntryPoint</code></p></li><li><p><code>ExceptionalInit</code></p></li><li><p><code>AutoSizedArrFilled</code></p></li><li><p><code>AssignInExpr</code></p></li><li><p><code>UsingDeprecated</code></p></li><li><p><code>TraitImplDeprecated</code></p></li><li><p><code>AssertNonBool</code></p></li><li><p><code>ExpectedIdentifier</code></p></li><li><p><code>ExpectedLabelIdent</code></p></li><li><p><code>ExpectedDotForCpp</code></p></li><li><p><code>ExpectedDblColon</code></p></li><li><p><code>EmptyParentNotValid</code></p></li><li><p><code>GiveExprToCast</code></p></li><li><p><code>GiveTypeForCast</code></p></li><li><p><code>ExpectedExpr</code></p></li><li><p><code>ExpectedAnonFn</code></p></li><li><p><code>ExpectedLeftOperand</code></p></li><li><p><code>ExpectedRightOperand</code></p></li><li><p><code>ExpectedColon</code></p></li><li><p><code>ExpectedBody</code></p></li><li><p><code>MoveUseDeclToTopOfFile</code></p></li><li><p><code>RenameForAvoidDuplication</code></p></li><li><p><code>RemoveUseDeclAvoidDuplication</code></p></li><li><p><code>RenameUseAliasAvoidDuplication</code></p></li><li><p><code>RemoveUseSelectionAvoidDupliation</code></p></li><li><p><code>RemoveConstToAssign</code></p></li><li><p><code>UseStaticKeywordToDef</code></p></li><li><p><code>RemoveFallthroughFromFinalCase</code></p></li><li><p><code>MakePubToAccess</code></p></li><li><p><code>ExpressionMustBeReferenceType</code></p></li><li><p><code>CastToEnumTypeInsteadOfEnum</code></p></li><li><p><code>TryFloatingPoint</code></p></li><li><p><code>ExpectedEqualsForAssign</code></p></li><li><p><code>ExpectedElseKeywordForTernary</code></p></li><li><p><code>UseCompatibleValuesForTernary</code></p></li><li><p><code>DeclareExceptional</code></p></li><li><p><code>HandleExceptional</code></p></li><li><p><code>HandleInFn</code></p></li><li><p><code>JustIgnoreOrHandle</code></p></li><li><p><code>UseImperative</code></p></li><li><p><code>UseUnsafeForDeprecated</code></p></li></ul>',117),p=[d];function t(s,a,r,n,u,h){return o(),i("div",null,p)}const E=e(c,[["render",t]]);export{f as __pageData,E as default};
