import{_ as s,o as n,c as e,Q as a}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"std::time","description":"","frontmatter":{},"headers":[],"relativePath":"std/time.md","filePath":"std/time.md"}'),o={name:"std/time.md"},t=a(`<h1 id="std-time" tabindex="-1">std::time <a class="header-anchor" href="#std-time" aria-label="Permalink to &quot;std::time&quot;">​</a></h1><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> UnixTime: </span><span style="color:#F97583;">u64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Type of unix-time seconds.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> TimeData: </span><span style="color:#F97583;">uint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Type of abstract time data.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> DurInt: </span><span style="color:#F97583;">i64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Integer type of durations.</p><h2 id="structures" tabindex="-1">Structures <a class="header-anchor" href="#structures" aria-label="Permalink to &quot;Structures&quot;">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> AbsTime {</span></span>
<span class="line"><span style="color:#E1E4E8;">    day:      TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    week_day: TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    year_day: TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    month:    TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    year:     TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    second:   TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    minute:   TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">    hour:     TimeData</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Abstract time.</p><p><strong>Methods:</strong></p><p><code>fn unix(self): UnixTime</code><br> Returns abstract time as unix-time seconds.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Time</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Timestamp. If you are going to use this structure to process data of a time, you can obtain an &#39;AbsTime&#39; instance by using the <code>abs()</code> method to be more efficient. Each function of this structure, such as <code>day</code> or <code>year</code>, uses an <code>abs()</code> call in the background. Back-to-back calls may cause you to make the same calculation over and over again.</p><p><strong>Methods:</strong></p><p><code>static fn unix(sec: UnixTime): Time</code><br> Returns new time instance from unix-time.</p><p><code>static fn now(): Time</code><br> Returns time instance of the moment.</p><p><code>fn unix(self): UnixTime</code><br> Returns time as unix-time.</p><p><code>fn day(self): TimeData</code><br> Returns day of month.</p><p><code>fn month(self): TimeData</code><br> Returns month.</p><p><code>fn year(self): TimeData</code><br> Returns year.</p><p><code>fn second(self): TimeData</code><br> Returns second.</p><p><code>fn minute(self): TimeData</code><br> Returns minute.</p><p><code>fn hour(self): TimeData</code><br> Returns hour.</p><p><code>fn abs(self): AbsTime</code><br> Returns time as abstract time.</p><hr><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Duration</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Duration is the time between two times.</p><p><strong>Static Fields:</strong></p><p><code>const Nanosecond: DurInt</code><br> A nanosecond.</p><p><code>const Microsecond: DurInt</code><br> Nanoseconds in microsecond. How many nanoseconds are in microsecond.</p><p><code>const Millisecond: DurInt</code><br> Nanoseconds in millisecond. How many nanoseconds are in millisecond.</p><p><code>const Second: DurInt</code><br> Nanoseconds in second. How many nanoseconds are in second.</p><p><code>const Minute: DurInt</code><br> Nanoseconds in minute. How many nanoseconds are in minute.</p><p><code>const Hour: DurInt</code><br> Nanoseconds in hour. How many nanoseconds are in hour.</p><p><strong>Methods:</strong></p><p><code>static fn nanoseconds(d: DurInt): DurInt</code><br> Returns how many nanoseconds are in given nanoseconds.</p><p><code>static fn microseconds(d: DurInt): DurInt</code><br> Returns how many nanoseconds are in given microseconds.</p><p><code>static fn milliseconds(d: DurInt): DurInt</code><br> Returns how many nanoseconds are in given milliseconds.</p><p><code>static fn seconds(d: DurInt): DurInt</code><br> Returns how many nanoseconds are in given seconds.</p><p><code>static fn minutes(d: DurInt): DurInt</code><br> Returns how many nanoseconds are in given minutes.</p><p><code>static fn hours(d: DurInt): DurInt</code><br> Returns how many nanoseconds are in given hours.</p>`,46),r=[t];function c(i,p,l,d,u,m){return n(),e("div",null,r)}const y=s(o,[["render",c]]);export{h as __pageData,y as default};
