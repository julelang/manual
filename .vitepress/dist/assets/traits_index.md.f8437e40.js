import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.7cd3ab18.js";const h=JSON.parse('{"title":"Traits","description":"","frontmatter":{},"headers":[],"relativePath":"traits/index.md","filePath":"traits/index.md"}'),t={name:"traits/index.md"},o=n(`<h1 id="traits" tabindex="-1">Traits <a class="header-anchor" href="#traits" aria-label="Permalink to &quot;Traits&quot;">​</a></h1><p>Traits can be used to represent common behaviors. As a result of the implementation of a trait by one or more structures that exhibit common behavior, the trait it applies to becomes usable wherever it is used. A trait can only contain functions. A trait can be <code>nil</code></p><h2 id="define-a-trait" tabindex="-1">Define a Trait <a class="header-anchor" href="#define-a-trait" aria-label="Permalink to &quot;Define a Trait&quot;">​</a></h2><p>Functions in a trait should only exist as prototypes (declaration of a trait, not a definition).</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Person {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">age</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">u8</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>All constructs that implement the trait above, must have the methods <code>name() str</code> and <code>age() u8</code>.</p><h2 id="access-modifiers" tabindex="-1">Access Modifiers <a class="header-anchor" href="#access-modifiers" aria-label="Permalink to &quot;Access Modifiers&quot;">​</a></h2><p>Traits supports access modifiers for definitions. And access modifier of relevant define, should implemented as same.</p><p>For example:</p><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> Person {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">age</span><span style="color:#E1E4E8;">(): </span><span style="color:#F97583;">u8</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="comparing-traits" tabindex="-1">Comparing Traits <a class="header-anchor" href="#comparing-traits" aria-label="Permalink to &quot;Comparing Traits&quot;">​</a></h2><p>During a comparison of traits: equal traits return true if two traits use the same allocation (both have the same pointer address), false if not.</p>`,13),r=[o];function l(p,i,c,d,u,m){return a(),e("div",null,r)}const b=s(t,[["render",l]]);export{h as __pageData,b as default};
